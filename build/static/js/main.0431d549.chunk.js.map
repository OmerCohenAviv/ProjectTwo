{"version":3,"sources":["assets/Avatars/pic1.jpg","assets/Avatars/pic2.jpg","assets/Avatars/pic3.jpg","components/User/Login/LoginUI.js","store/actions/User.js","store/actions/actionTypes.js","DataBase.js","store/actions/Home.js","containers/User/Login/Login.js","containers/User/Logout/Logout.js","components/Questions/Question/QuestionUI.js","components/Answers/AnswerUI/AnswerUI.js","components/Questions/QuestionsUI.js","components/Questions/FullQuestion/FullQuestion.js","components/Answers/FullAnswer/FullAnswer.js","containers/Home/HomeUtility/Render.js","containers/Home/Home.js","components/Navigation/NavigationItems/DisplayItems/DisplayItems.js","components/Navigation/NavigationItems/LogStatus/LogStatus.js","components/Navigation/Toolbar/Toolbar.js","hoc/Layout/Layout.js","components/Leadersboard/LeadersboardUI.js","containers/Leadersboard/Leadersboard.js","components/NewQuestionUI/NewQuestionUI.js","containers/NewQuestion/NewQuestion.js","App.js","serviceWorker.js","utility/functions/functions.js","store/reducers/User.js","store/reducers/Home.js","index.js"],"names":["module","exports","loginUI","props","allUsers","displayUsers","user","push","map","key","id","value","name","Card","style","width","margin","Body","Title","Form","userToBeLogged","onChange","changeUser","defaultValue","hidden","Button","disabled","onClick","clickedLog","marginTop","display","logInUserInit","userID","allQuestions","token","filter","userObj","type","users","sarahedo","avatarURL","pic1","answers","questions","tylermcginnis","pic2","johndoe","pic3","author","timestamp","optionOne","votes","text","optionTwo","_saveQuestion","question","Promise","res","rej","authedUser","formattedQuestion","optionOneText","optionTwoText","Math","random","toString","substring","Date","now","formatQuestion","setTimeout","concat","setAllUsersQuestionsInit","dispatch","then","setAllUsersQuestionsSuccess","catch","error","setAllUsersInit","Object","values","getAllUsersSuccess","saveQuestionInit","qid","answer","dataAPI","response","Login","state","selectUserHandler","event","setState","target","onLoginHandler","preventDefault","onLoginUser","displayLogin","Spinner","animation","this","LoginUI","loggedUser","to","Component","connect","Home","User","actions","Logout","logoutUser","questionUI","userName","Img","variant","src","avatar","Text","answerUI","questionsUI","unAnsweredQuestions","answeredQuestions","showAnswers","Col","sm","QuestionUI","showFullPollFunc","notAnsweredQuestions","AnswerUI","showFullAnswered","Container","Row","switchQA","marginLeft","fullQuestion","console","log","userAvatar","bg","as","color","chooseOption","saveQuestion","history","submitAnswer","fullAnswer","questionKeyId","join","pickedQuestion","numberOfVotes","length","progressPrecent","optionOnePrecent","toFixed","optionTwoPrecent","getAvatar","displayCard","CardGroup","Header","ListGroup","Item","ProgressBar","label","UtilityRenderHome","path","exact","render","routeProps","QuestionsUI","fullQuestions","FullQuestion","cancelFullPoll","fullAnswers","FullAnswer","canceled","cancelFullAnswer","loading","role","questionAnswered","showAnswersHandler","prevState","chooseOptionHandler","option","saveQuestionHandler","qID","questionInfo","onSaveAnswerInit","onSetAllUsersInit","onSetAllQuestions","allQuestionsCopy","allUsersCopy","JSON","stringify","homeUI","displayItems","Nav","className","activeClassName","logStatus","logStat","toolbar","Navbar","Brand","icon","faQuestionCircle","DisplayItems","userStatus","LogStatus","Layout","Toolbar","children","leaderboardUI","ListGroupItem","totalPoints","answersPoints","questionsPoints","Leadersboard","sort","a","b","reverse","newQuestionUI","validated","Control","placeholder","changed","required","isValid","submit","NewQuestion","rules","valid","validForm","changeOptionValueHandler","selectedOption","selectedOptionUpdated","checkValid","trim","submitFormHandler","onAddQuestion","onGetAllUsers","NewQuestionUI","getAllUsers","newQuestion","err","App","onGetAllUsersInit","onAutoLogin","routes","component","localStorage","getItem","Boolean","window","location","hostname","match","updateObject","oldObj","newObj","initalState","UserReducer","action","answered","keys","q","includes","setItem","removeItem","HomeReducer","allQuestionsSorted","updateAllQuestions","rootReducer","combineReducers","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","app","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0431d549.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pic1.007abbb5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pic2.06f20a9c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pic3.771edd67.jpg\";","import React, { Fragment } from 'react';\r\n\r\nimport { Card, Button, Form } from 'react-bootstrap'\r\n\r\nconst loginUI = (props) => {\r\n    const { allUsers } = props\r\n    let displayUsers = []\r\n    for (let user of allUsers) {\r\n        displayUsers.push(user)\r\n    };\r\n    displayUsers = displayUsers.map(user => {\r\n        return <option key={user.id} value={user.id}> {user.name} </option>\r\n    });\r\n\r\n    return (\r\n        <Fragment>\r\n            <Card style={{ width: '18rem',margin:'0 auto'}}>\r\n                <Card.Body>\r\n                    <Card.Title>Select User</Card.Title>\r\n                        <Form >\r\n                            <select value={props.userToBeLogged} onChange={props.changeUser} >\r\n                                <option defaultValue hidden>Choose User</option>\r\n                                {displayUsers}\r\n                            </select>\r\n                            <Button\r\n                                disabled={props.userToBeLogged === ''}\r\n                                onClick={props.clickedLog}\r\n                                style={{ marginTop: '10px', display: 'flex' }}>\r\n                                Submit\r\n                             </Button>\r\n                        </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\n\r\nexport default loginUI;","\r\nimport * as actionTypes from './actionTypes';\r\n\r\n\r\n\r\nexport const logInUserInit = (userID, allQuestions, allUsers, token) => {\r\n    let user = allUsers.filter((userObj) => {\r\n        return userObj.id === userID\r\n    })\r\n    user = user[0]\r\n    return { type: actionTypes.LOGIN_USER, user: user, allQuestions: allQuestions, token: token }\r\n};\r\nexport const logOutUserInit = () => {\r\n    return { type: actionTypes.LOGOUT_USER }\r\n};\r\nexport const autoLoginInit = (allQuestions, allUsers) => {\r\n    return dispatch => {\r\n        const token = localStorage.getItem('token')\r\n        if (token) {\r\n            dispatch(logInUserInit(token, allQuestions, allUsers, token))\r\n        }\r\n        else dispatch(logOutUserInit())\r\n    };\r\n};\r\n\r\n","export const LOGIN_USER = 'LOGIN_USER';\r\nexport const LOGOUT_USER = 'LOGOUT_USER';\r\nexport const AUTO_LOGIN = 'AUTO_LOGIN';\r\n\r\nexport const GET_ALL_USERS_START   =  'GET_ALL_USERS_START';\r\nexport const GET_ALL_USERS_SUCCESS =  'GET_ALL_USERS_SUCCESS';\r\nexport const GET_ALL_USERS_FAIL    =  'GET_ALL_USERS_FAIL';\r\n\r\n\r\nexport const SET_ALL_USERS_QUESTIONS_START =    'SET_ALL_USERS_QUESTIONS_START';\r\nexport const SET_ALL_USERS_QUESTIONS_SUCCESS =  'SET_ALL_USERS_QUESTIONS_SUCCESS';\r\nexport const SET_ALL_USERS_QUESTIONS_FAIL =     'SET_ALL_USERS_QUESTIONS_FAIL';\r\n\r\nexport const SAVE_QUESTION_ANSWER_START = 'SAVE_QUESTION_ANSWER_START';\r\nexport const SAVE_QUESTION_ANSWER_SUCCESS = 'SAVE_QUESTION_ANSWER_SUCCESS';\r\nexport const SAVE_QUESTION_ANSWER_FAIL = 'SAVE_QUESTION_ANSWER_FAIL';\r\n\r\nexport const ADD_QUESTION_START = 'ADD_QUESTION_START';\r\nexport const ADD_QUESTION_SUCCESS = 'ADD_QUESTION_SUCCESS';\r\nexport const ADD_QUESTION_FAIL = 'ADD_QUESTION_FAIL';","import pic1 from './assets/Avatars/pic1.jpg'\r\nimport pic2 from './assets/Avatars/pic2.jpg'\r\nimport pic3 from './assets/Avatars/pic3.jpg'\r\n\r\nlet users = {\r\n    sarahedo: {\r\n      id: 'sarahedo',\r\n      name: 'Sarah Edo',\r\n      avatarURL: pic1,\r\n      answers: {\r\n        \"8xf0y6ziyjabvozdd253nd\": 'optionOne',\r\n        \"6ni6ok3ym7mf1p33lnez\": 'optionTwo',\r\n        \"am8ehyc8byjqgar0jgpub9\": 'optionTwo',\r\n        \"loxhs1bqm25b708cmbf3g\": 'optionTwo'\r\n      },\r\n      questions: ['8xf0y6ziyjabvozdd253nd', 'am8ehyc8byjqgar0jgpub9']\r\n    },\r\n    tylermcginnis: {\r\n      id: 'tylermcginnis',\r\n      name: 'Tyler McGinnis',\r\n      avatarURL: pic2,\r\n      answers: {\r\n        \"vthrdm985a262al8qx3do\": 'optionOne',\r\n        \"xj352vofupe1dqz9emx13r\": 'optionTwo',\r\n      },\r\n      questions: ['loxhs1bqm25b708cmbf3g', 'vthrdm985a262al8qx3do'],\r\n    },\r\n    johndoe: {\r\n      id: 'johndoe',\r\n      name: 'John Doe',\r\n      avatarURL: pic3,\r\n      answers: {\r\n        \"xj352vofupe1dqz9emx13r\": 'optionOne',\r\n        \"vthrdm985a262al8qx3do\": 'optionTwo',\r\n        \"6ni6ok3ym7mf1p33lnez\": 'optionTwo'\r\n      },\r\n      questions: ['6ni6ok3ym7mf1p33lnez', 'xj352vofupe1dqz9emx13r'],\r\n    }\r\n  }\r\n  \r\n  let questions = {\r\n    \"8xf0y6ziyjabvozdd253nd\": {\r\n      id: '8xf0y6ziyjabvozdd253nd',\r\n      author: 'sarahedo',\r\n      timestamp: 1467166872634,\r\n      optionOne: {\r\n        votes: ['sarahedo'],\r\n        text: 'have horrible short term memory',\r\n      },\r\n      optionTwo: {\r\n        votes: [],\r\n        text: 'have horrible long term memory'\r\n      }\r\n    },\r\n    \"6ni6ok3ym7mf1p33lnez\": {\r\n      id: '6ni6ok3ym7mf1p33lnez',\r\n      author: 'johndoe',\r\n      timestamp: 1468479767190,\r\n      optionOne: {\r\n        votes: [],\r\n        text: 'become a superhero',\r\n      },\r\n      optionTwo: {\r\n        votes: ['johndoe', 'sarahedo'],\r\n        text: 'become a supervillain'\r\n      }\r\n    },\r\n    \"am8ehyc8byjqgar0jgpub9\": {\r\n      id: 'am8ehyc8byjqgar0jgpub9',\r\n      author: 'sarahedo',\r\n      timestamp: 1488579767190,\r\n      optionOne: {\r\n        votes: [],\r\n        text: 'be telekinetic',\r\n      },\r\n      optionTwo: {\r\n        votes: ['sarahedo'],\r\n        text: 'be telepathic'\r\n      }\r\n    },\r\n    \"loxhs1bqm25b708cmbf3g\": {\r\n      id: 'loxhs1bqm25b708cmbf3g',\r\n      author: 'tylermcginnis',\r\n      timestamp: 1482579767190,\r\n      optionOne: {\r\n        votes: [],\r\n        text: 'be a front-end developer',\r\n      },\r\n      optionTwo: {\r\n        votes: ['sarahedo'],\r\n        text: 'be a back-end developer'\r\n      }\r\n    },\r\n    \"vthrdm985a262al8qx3do\": {\r\n      id: 'vthrdm985a262al8qx3do',\r\n      author: 'tylermcginnis',\r\n      timestamp: 1489579767190,\r\n      optionOne: {\r\n        votes: ['tylermcginnis'],\r\n        text: 'find $50 yourself',\r\n      },\r\n      optionTwo: {\r\n        votes: ['johndoe'],\r\n        text: 'have your best friend find $500'\r\n      }\r\n    },\r\n    \"xj352vofupe1dqz9emx13r\": {\r\n      id: 'xj352vofupe1dqz9emx13r',\r\n      author: 'johndoe',\r\n      timestamp: 1493579767190,\r\n      optionOne: {\r\n        votes: ['johndoe'],\r\n        text: 'write JavaScript',\r\n      },\r\n      optionTwo: {\r\n        votes: ['tylermcginnis'],\r\n        text: 'write Swift'\r\n      }\r\n    },\r\n  }\r\n  \r\n  function generateUID () {\r\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\r\n  }\r\n  \r\n  export function _getUsers () {\r\n    return new Promise((res, rej) => {\r\n      setTimeout(() => res({...users}), 1000)\r\n    })\r\n  }\r\n  \r\n  export function _getQuestions () {\r\n    return new Promise((res, rej) => {\r\n      setTimeout(() => res({...questions}), 1000)\r\n    })\r\n  }\r\n  \r\n  function formatQuestion ({ optionOneText, optionTwoText, author }) {\r\n    return {\r\n      id: generateUID(),\r\n      timestamp: Date.now(),\r\n      author,\r\n      optionOne: {\r\n        votes: [],\r\n        text: optionOneText,\r\n      },\r\n      optionTwo: {\r\n        votes: [],\r\n        text: optionTwoText,\r\n      }\r\n    }\r\n  }\r\n  \r\n  export function _saveQuestion (question) {\r\n    return new Promise((res, rej) => {\r\n      const authedUser = question.author;\r\n      const formattedQuestion = formatQuestion(question);\r\n  \r\n      setTimeout(() => {\r\n        questions = {\r\n          ...questions,\r\n          [formattedQuestion.id]: formattedQuestion\r\n        }\r\n        \r\n        users = {\r\n          ...users,\r\n          [authedUser]: {\r\n            ...users[authedUser],\r\n            questions: users[authedUser].questions.concat([formattedQuestion.id])\r\n          }\r\n        }\r\n  \r\n        res(formattedQuestion)\r\n      }, 1000)\r\n    })\r\n  }\r\n  \r\n  export function _saveQuestionAnswer ({ authedUser, qid, answer }) {\r\n    return new Promise((res, rej) => {\r\n      setTimeout(() => {\r\n        users = {\r\n          ...users,\r\n          [authedUser]: {\r\n            ...users[authedUser],\r\n            answers: {\r\n              ...users[authedUser].answers,\r\n              [qid]: answer\r\n            }\r\n          }\r\n        }\r\n  \r\n        questions = {\r\n          ...questions,\r\n          [qid]: {\r\n            ...questions[qid],\r\n            [answer]: {\r\n              ...questions[qid][answer],\r\n              votes: questions[qid][answer].votes.concat([authedUser])\r\n            }\r\n          }\r\n        }\r\n  \r\n        res()\r\n      }, 500)\r\n    })\r\n  }","import * as dataAPI from '../../DataBase';\r\nimport * as actionTypes from './actionTypes';\r\n\r\n\r\n//Getting All Questions.\r\nconst setAllUsersQuestionsStart = () => {\r\n    return { type: actionTypes.SET_ALL_USERS_QUESTIONS_START }\r\n};\r\nconst setAllUsersQuestionsSuccess = (questions) => {\r\n    return { type: actionTypes.SET_ALL_USERS_QUESTIONS_SUCCESS, questions: questions }\r\n};\r\nconst setAllUsersQuestionsFail = () => {\r\n    return { type: actionTypes.SET_ALL_USERS_QUESTIONS_FAIL }\r\n};\r\nexport const setAllUsersQuestionsInit = () => {\r\n    return dispatch => {\r\n        dispatch(setAllUsersQuestionsStart())\r\n        dataAPI._getQuestions()\r\n            .then(questions => dispatch(setAllUsersQuestionsSuccess(questions)))\r\n            .catch(error => dispatch(setAllUsersQuestionsFail(error)))\r\n    };\r\n};\r\n\r\n//Getting All Users.\r\nconst getAllUsersStart = () => {\r\n    return { type: actionTypes.GET_ALL_USERS_START };\r\n};\r\nconst getAllUsersSuccess = (users) => {\r\n    const usersArr = Object.values(users);\r\n    return { type: actionTypes.GET_ALL_USERS_SUCCESS, users: usersArr };\r\n};\r\nconst getAllUsersFail = () => {\r\n    return { type: actionTypes.GET_ALL_USERS_FAIL };\r\n};\r\nexport const setAllUsersInit = () => {\r\n    return dispatch => {\r\n        dispatch(getAllUsersStart())\r\n        dataAPI._getUsers()\r\n            .then(users => dispatch(getAllUsersSuccess(users)))\r\n            .catch(error => dispatch(getAllUsersFail(error)))\r\n    };\r\n}; \r\n\r\n//Answering Question\r\nconst saveQuestionAnswerStart = () => {\r\n    return { type: actionTypes.SAVE_QUESTION_ANSWER_START }\r\n};\r\nconst saveQuestionAnswerSuccess = () => {\r\n    return { type: actionTypes.SAVE_QUESTION_ANSWER_SUCCESS }\r\n};\r\nconst saveQuestionAnswerFail = () => {\r\n    return { type: actionTypes.SAVE_QUESTION_ANSWER_FAIL }\r\n};\r\nexport const saveQuestionInit = ({ authedUser, qid, answer }) => {\r\n    return dispatch => {\r\n        dispatch(saveQuestionAnswerStart())\r\n        dataAPI._saveQuestionAnswer({ authedUser, qid, answer })\r\n            .then(response => dispatch(saveQuestionAnswerSuccess()))\r\n            .catch(error => dispatch(saveQuestionAnswerFail(error)))\r\n    };\r\n};\r\n\r\n//Adding a Question\r\nconst addQuestionStart = () => {\r\n    return {type: actionTypes.ADD_QUESTION_START}\r\n};\r\nconst addQuestionSuccess = (newQuestion) => {\r\n    return {type: actionTypes.ADD_QUESTION_SUCCESS, newQuestion: newQuestion}\r\n};\r\nconst addQuestionFail = (error) => {\r\n    return {type: actionTypes.ADD_QUESTION_FAIL}\r\n};\r\nexport const addQuestionInit= (questionInfo) => {\r\n    return dispatch => {\r\n        dispatch( addQuestionStart() )\r\n        dataAPI._saveQuestion(questionInfo)\r\n        .then( res => {\r\n            dispatch(addQuestionSuccess(res))\r\n            dispatch( setAllUsersInit() )\r\n            dispatch( setAllUsersQuestionsInit()) \r\n        })\r\n        .catch( err => ( dispatch( addQuestionFail( err ) ) ) )\r\n    };\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport LoginUI from '../../../components/User/Login/LoginUI';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\n\r\nclass Login extends Component {\r\n    state = { \r\n        user: ''\r\n    };\r\n\r\n    selectUserHandler = (event) => {\r\n        this.setState({ user: event.target.value })\r\n    };\r\n    onLoginHandler = (event) => {\r\n        event.preventDefault();\r\n        let userToBeLogged = this.props.allUsers.filter(user => {\r\n            return user.id === this.state.user\r\n        });\r\n        userToBeLogged = userToBeLogged[0]\r\n        this.props.onLoginUser(userToBeLogged.id, this.props.allQuestions, this.props.allUsers)\r\n    };\r\n\r\n    render() {\r\n        let displayLogin =  <Spinner animation=\"border\" />\r\n        if (this.props.allUsers) {\r\n            displayLogin = (\r\n                <LoginUI\r\n                    changeUser={this.selectUserHandler}\r\n                    userToBeLogged={this.state.user}\r\n                    clickedLog={this.onLoginHandler}\r\n                    allUsers={this.props.allUsers} />\r\n            );\r\n        };\r\n        if (this.props.loggedUser) { displayLogin = <Redirect to='/' /> }\r\n\r\n        return <div> {displayLogin} </div> \r\n    };\r\n};\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        allQuestions: state.Home.allQuestions,\r\n        allUsers: state.Home.allUsers,\r\n        loggedUser: state.User.loggedUser !== null\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return { onLoginUser: (user, allQuestions, allUsers) => dispatch(actions.logInUserInit(user, allQuestions, allUsers)) };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React, { Component } from 'react';\r\n\r\nimport * as actions from '../../../store/actions/index';\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n\r\nclass Logout extends Component {\r\n    componentDidMount() { this.props.logoutUser() }\r\n  \r\n    render() {\r\n        return  <div> <Redirect to='/Login'/> </div> \r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {   logoutUser: () => dispatch( actions.logOutUserInit() ) };\r\n};\r\n\r\nexport default connect(null,mapDispatchToProps)(Logout);","import React, { Fragment } from 'react';\r\n\r\nimport { Card, Button } from 'react-bootstrap'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nconst questionUI = (props) => {\r\n    const { userName, question } = props\r\n\r\n    return (\r\n        <Fragment>\r\n            <Card style={{ width: '18rem' }}>\r\n                <Card.Img variant=\"top\" src={props.avatar} />\r\n                <Card.Body>\r\n                    <Card.Title> Asked By - {userName} </Card.Title>\r\n                    <Card.Text>\r\n                        optionOne - {question.optionOne.text}\r\n                    </Card.Text>\r\n                    <NavLink to={`/questions/${question.id}`}>\r\n                        <Button variant=\"primary\" >Watch Full question</Button>\r\n                    </NavLink>\r\n                </Card.Body>\r\n            </Card>\r\n        </Fragment>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default questionUI;","import React from 'react';\r\n\r\nimport { Card, Button } from 'react-bootstrap';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst answerUI = (props) => {\r\n    const { userName, question } = props\r\n    return (\r\n        <Card style={{ width: '18rem' }}>\r\n            <Card.Img variant=\"top\" src={props.avatar} />\r\n            <Card.Body>\r\n                <Card.Title> Asked By - {userName} </Card.Title>\r\n                <Card.Text>\r\n                    optionOne - {question.optionOne.text}\r\n                </Card.Text>\r\n                <NavLink to={`/questions/${question.id}`}>\r\n                    <Button variant=\"primary\" >Watch Full answer INFO</Button>\r\n                </NavLink>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default answerUI;","import React from 'react';\r\n\r\nimport { Container, Row, Col, Button } from 'react-bootstrap';\r\nimport QuestionUI from './Question/QuestionUI';\r\nimport AnswerUI from '../Answers/AnswerUI/AnswerUI';\r\n\r\nconst questionsUI = (props) => {\r\n    const unAnsweredQuestions = [];\r\n    const answeredQuestions = [];\r\n    if (!props.showAnswers)\r\n        for (let question of props.notAnsweredQuestions) {\r\n            const avatar = props.allUsers.filter(user => user.id === question.author)[0].avatarURL\r\n            const userName = props.allUsers.filter(user => user.id === question.author)[0].name\r\n            unAnsweredQuestions.push(\r\n                <Col sm key={question.id}>\r\n                    <QuestionUI\r\n                        avatar={avatar}\r\n                        showFullPollFunc={props.showFullPollFunc}\r\n                        allUsers={props.allUsers}\r\n                        question={question}\r\n                        userName={userName} />\r\n                </Col>\r\n            );\r\n        };\r\n    if (props.showAnswers) {\r\n        for (let question of props.answeredQuestions) {\r\n            const userName = props.allUsers.filter(user => user.id === question.author)[0].name\r\n            const avatar = props.allUsers.filter(user => user.id === question.author)[0].avatarURL\r\n            answeredQuestions.push(\r\n                <Col sm key={question.id}>\r\n                    <AnswerUI\r\n                        avatar={avatar}\r\n                        showFullAnswered={props.showFullAnswered}\r\n                        allUsers={props.allUsers}\r\n                        question={question}\r\n                        userName={userName} />\r\n                </Col>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container style={{ display: 'flex' }} >\r\n            <Row style={{ display: 'block' }}>\r\n                <Button onClick={props.switchQA}  style={{display:'block',margin: '0 auto'}}> Questions</Button>\r\n                {unAnsweredQuestions}\r\n            </Row>\r\n            <Row style={{ display: 'block',marginLeft:'auto' }}>\r\n                <Button onClick={props.switchQA} style={{display:'block',margin: '0 auto'}}>answered Questions</Button>\r\n                {answeredQuestions}\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\n\r\nexport default questionsUI;","import React from 'react';\r\n\r\nimport { Card, Button } from 'react-bootstrap'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nconst fullQuestion = (props) => {\r\n\r\n    console.log(props)\r\n    const { question } = props\r\n    const userName = props.allUsers.filter(user => user.id === question.author)[0].name\r\n    const userAvatar= props.allUsers.filter(user => user.id === question.author)[0].avatarURL\r\n    let fullQuestion = (\r\n        <Card bg='info' text='white' style={{ width: '18rem' }}>\r\n            <Card.Img variant=\"top\" src={userAvatar} />\r\n            <Card.Body>\r\n                <Card.Title> Asked By - {userName} </Card.Title>\r\n                <Card.Text as='div'>\r\n                    <p>Would you rather</p>\r\n                    <hr/>\r\n                    <Button\r\n                        style={{ color: 'white' }}\r\n                        variant='outline-warning'\r\n                        onClick={() => props.chooseOption('optionOne')}>\r\n                        option One - {question.optionOne.text}\r\n                    </Button>\r\n                    <hr />\r\n                    <Button\r\n                        variant='outline-warning'\r\n                        style={{ color: 'white' }}\r\n                        onClick={() => props.chooseOption('optionTwo')}>\r\n                        option Two - {question.optionTwo.text}\r\n                    </Button>\r\n                </Card.Text>\r\n                <hr />\r\n                <Button variant=\"primary\" onClick={() => props.saveQuestion(question.id)} > Submit</Button>\r\n                <Button variant=\"danger\"  onClick={ () => props.history.push('/') }  >Cancel</Button>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n    if (props.submitAnswer) {\r\n        fullQuestion = <div> <Redirect to='/' /> </div>\r\n    }\r\n    return (\r\n        <div>\r\n            {fullQuestion}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default fullQuestion;","import React, { Fragment } from 'react';\r\n\r\nimport { ProgressBar } from 'react-bootstrap'\r\nimport { Card, ListGroup, CardGroup, Button } from 'react-bootstrap';\r\n\r\nconst fullAnswer = (props) => {\r\n    const { question, user } = props;\r\n    const questionKeyId = Object.values({ ...question.id }).join('');\r\n    const { [questionKeyId]: questionID } = user.answers;\r\n    const pickedQuestion = questionID;\r\n    const numberOfVotes = question.optionOne.votes.length + question.optionTwo.votes.length;\r\n    const progressPrecent = numberOfVotes * 100;\r\n    const optionOnePrecent = ((question.optionOne.votes.length * 100) / progressPrecent * 100).toFixed();\r\n    const optionTwoPrecent = ((question.optionTwo.votes.length * 100) / progressPrecent * 100).toFixed();\r\n    let getAvatar = props.allUsers.filter(user => {\r\n        return user.id === question.author\r\n    });\r\n    getAvatar = getAvatar[0].avatarURL\r\n    console.log(getAvatar)\r\n    let displayCard = (\r\n        <CardGroup>\r\n            <Card>\r\n                <Card.Img variant=\"top\" src={getAvatar} />\r\n            </Card>\r\n            <Card style={{ width: '18rem' }} bg=\"success\" text=\"white\" >\r\n                <Card.Header>Option One - {question.optionOne.text}</Card.Header>\r\n                <ListGroup variant=\"flush\" style={{ color: 'black' }}>\r\n                    <ListGroup.Item>Number of people voted for this - {question.optionOne.votes.length} out of {numberOfVotes}</ListGroup.Item>\r\n                    <ListGroup.Item> <ProgressBar now={optionOnePrecent} label={`${optionOnePrecent}%`} /> </ListGroup.Item>\r\n                </ListGroup>\r\n            </Card>\r\n            <Card style={{ width: '18rem' }}>\r\n                <Card.Header>Option Two - {question.optionTwo.text}</Card.Header>\r\n                <ListGroup variant=\"success\" >\r\n                    <ListGroup.Item>Number of people voted for this - {question.optionTwo.votes.length} out of {numberOfVotes}  </ListGroup.Item>\r\n                    <ListGroup.Item><ProgressBar now={optionTwoPrecent} label={`${optionTwoPrecent}%`} /></ListGroup.Item>\r\n                </ListGroup>\r\n            </Card>\r\n        </CardGroup>\r\n    );\r\n\r\n\r\n    if (pickedQuestion === 'optionTwo') {\r\n        displayCard = (\r\n            <CardGroup>\r\n                <Card>\r\n                    <Card.Img variant=\"top\" src={getAvatar} />\r\n                </Card>\r\n                <Card style={{ width: '18rem' }} >\r\n                    <Card.Header>Option One - {question.optionOne.text}</Card.Header>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item>Number of people voted for this - {question.optionOne.votes.length} out of {numberOfVotes}</ListGroup.Item>\r\n                        <ListGroup.Item> <ProgressBar now={optionOnePrecent} label={`${optionOnePrecent}%`} /> </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Card>\r\n                <Card style={{ width: '18rem' }} bg=\"success\" text=\"white\">\r\n                    <Card.Header>Option Two - {question.optionTwo.text}</Card.Header>\r\n                    <ListGroup variant=\"flush\" style={{ color: 'black' }}>\r\n                        <ListGroup.Item>Number of people voted for this - {question.optionTwo.votes.length} out of {numberOfVotes}  </ListGroup.Item>\r\n                        <ListGroup.Item><ProgressBar now={optionTwoPrecent} label={`${optionTwoPrecent}%`} /></ListGroup.Item>\r\n                    </ListGroup>\r\n                </Card>\r\n            </CardGroup>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            {displayCard}\r\n            <Button variant='danger' onClick={() => props.history.push('/')} >GoBack</Button>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\n\r\nexport default fullAnswer;","import React from 'react';\r\n\r\nimport QuestionsUI from '../../../components/Questions/QuestionsUI';\r\nimport FullQuestion from '../../../components/Questions/FullQuestion/FullQuestion';\r\nimport FullAnswer from '../../../components/Answers/FullAnswer/FullAnswer';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { Route } from 'react-router-dom';\r\n\r\nconst UtilityRenderHome = (props) => {\r\n    let allQuestions = ''\r\n    //Showing all questions/Answers\r\n    if (props.notAnsweredQuestions && props.user) {\r\n        allQuestions = <Route\r\n            path='/'\r\n            exact\r\n            render={(routeProps) => <QuestionsUI\r\n                {...props}\r\n                {...routeProps}\r\n                showAnswers={props.showAnswers}\r\n                switchQA={props.switchQA}\r\n                allUsers={props.allUsers}\r\n                answeredQuestions={props.answeredQuestions}\r\n                notAnsweredQuestions={props.notAnsweredQuestions}\r\n                user={props.user}\r\n            />\r\n            }\r\n        />\r\n    }\r\n  //Routes for showing a clicked  Question\r\n    const fullQuestions = props.notAnsweredQuestions.map(question => {\r\n        return <Route\r\n            exact\r\n            key={question.id}\r\n            path={`/questions/${question.id}`}\r\n            render={(routeProps) => <FullQuestion\r\n                {...props}\r\n                {...routeProps}\r\n                user={props.user}\r\n                submitAnswer={props.submitAnswer}\r\n                chooseOption={props.chooseOption}\r\n                saveQuestion={props.saveQuestion}\r\n                allUsers={props.allUsers}\r\n                cancelFullPoll={props.cancelFullPoll}\r\n                question={question}\r\n            />\r\n            }\r\n        />\r\n    });\r\n    //Routes for showing a clicked answered Question\r\n    const fullAnswers = props.answeredQuestions.map(answer => {\r\n        return <Route\r\n            exact\r\n            key={answer.id}\r\n            path={`/questions/${answer.id}`}\r\n            render={(routeProps) => <FullAnswer\r\n                {...props}\r\n                {...routeProps}\r\n                canceled={props.cancelFullAnswer}\r\n                user={props.user}\r\n                question={answer}\r\n            />\r\n            }\r\n        />\r\n    });\r\n    //Spinner if loading is true.\r\n    if (props.loading) {\r\n        allQuestions = <Spinner animation=\"border\" role=\"status\" />\r\n    };\r\n    return (\r\n        <div>\r\n            {allQuestions}\r\n            {fullQuestions}\r\n            {fullAnswers}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default UtilityRenderHome;","import React, { Component } from 'react';\r\n\r\n\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport { Spinner } from 'react-bootstrap'\r\nimport UtilityRenderHome from './HomeUtility/Render'\r\n\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        showAnswers: false,\r\n        submitAnswer: false,\r\n        chooseOption: '',\r\n        allQuestions: null,\r\n        allUsers: null,\r\n        questionAnswered: null\r\n    };\r\n    componentDidMount() {\r\n        if (this.props.allQuestions) {\r\n            const allQuestionsCopy = [...this.props.allQuestions]\r\n            const allUsersCopy = [...this.props.allUsers]\r\n            this.setState({ allQuestions: allQuestionsCopy, allUsers: allUsersCopy})\r\n        };  \r\n    };\r\n    componentDidUpdate() {\r\n        if ( this.state.allQuestions) {\r\n            if ((JSON.stringify(this.state.allQuestions) !== JSON.stringify(this.props.allQuestions) )) {\r\n                console.log('hey')\r\n                const allQuestionsCopy = [...this.props.allQuestions]\r\n                this.setState({ allQuestions: allQuestionsCopy })\r\n                let userToBeLogged = this.props.allUsers.filter(user => {\r\n                    return user.id === this.props.loggedUser.id\r\n                });\r\n                userToBeLogged = userToBeLogged[0]\r\n                this.setState({ allQuestions: allQuestionsCopy }, () => {\r\n                    this.props.onLoginUser(userToBeLogged.id, this.props.allQuestions, this.props.allUsers)\r\n                })\r\n            }\r\n        }\r\n       if ((this.state.submitAnswer && !this.props.loading)) {\r\n            let userToBeLogged = this.props.allUsers.filter(user => {\r\n                return user.id === this.props.loggedUser.id\r\n            });\r\n            userToBeLogged = userToBeLogged[0]\r\n            this.props.onLoginUser(userToBeLogged.id, this.props.allQuestions, this.props.allUsers)\r\n            this.setState({ submitAnswer: false }, () => {\r\n                this.props.history.push(`/questions/${this.state.questionAnswered}`)\r\n            })\r\n        };\r\n    };\r\n    //Switch Between Answered Questions/Not answered\r\n    showAnswersHandler = () => {\r\n        this.setState(prevState => ({ showAnswers: !prevState.showAnswers }))\r\n    };\r\n    //Choosing an option inside a poll\r\n    chooseOptionHandler = (option) => {\r\n        this.setState({ chooseOption: option })\r\n    };\r\n    //Submiting the Question \r\n    saveQuestionHandler = (qID) => {\r\n        const questionInfo = {\r\n            authedUser: this.props.loggedUser.id,\r\n            qid: qID,\r\n            answer: this.state.chooseOption\r\n        };\r\n        this.props.onSaveAnswerInit(questionInfo)\r\n        this.props.onSetAllUsersInit()\r\n        this.props.onSetAllQuestions()\r\n        this.setState({ submitAnswer: true,  questionAnswered: qID })\r\n    };\r\n\r\n    render() {\r\n        let homeUI = <p>Please Log In </p>\r\n        if (this.props.loading) {\r\n            homeUI = <Spinner animation=\"border\" role=\"status\" />\r\n        }\r\n        if (this.props.loggedUser && !this.props.loading) {\r\n            homeUI = (\r\n                <UtilityRenderHome\r\n                    user={this.props.loggedUser}\r\n                    submitAnswer={this.state.submitAnswer}\r\n                    allUsers={this.props.allUsers}\r\n                    showAnswers={this.state.showAnswers}\r\n                    answeredQuestions={this.props.answeredQuestions}\r\n                    notAnsweredQuestions={this.props.notAnsweredQuestions}\r\n                    chooseOption={this.chooseOptionHandler}\r\n                    saveQuestion={this.saveQuestionHandler}\r\n                    switchQA={this.showAnswersHandler} />\r\n            );\r\n        };\r\n\r\n        return <div>{homeUI}</div>\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.Home.loading,\r\n        allQuestions: state.Home.allQuestions,\r\n        allUsers: state.Home.allUsers,\r\n        answeredQuestions: state.User.answeredQuestions,\r\n        notAnsweredQuestions: state.User.notAnsweredQuestions,\r\n        loggedUser: state.User.loggedUser,\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onLoginUser: (user, allQuestions, userID) => dispatch(actions.logInUserInit(user, allQuestions, userID)),\r\n        onSetAllUsersInit: () => dispatch(actions.setAllUsersInit()),\r\n        onSetAllQuestions: () => dispatch(actions.setAllUsersQuestionsInit()),\r\n        onSaveAnswerInit: (questionInfo) => dispatch(actions.saveQuestionInit(questionInfo))\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React, { Fragment } from 'react';\r\nimport { Nav } from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst displayItems = (props) => {\r\n    let display = (\r\n        <Nav className=\"mr-auto\">\r\n            <Nav.Item>\r\n                <NavLink to='/' className=\"nav-link\" activeClassName='nav-link active' exact>\r\n                    Home\r\n                </NavLink>\r\n            </Nav.Item>\r\n        </Nav>\r\n    );\r\n    if (props.user) {\r\n        display = (\r\n            <Nav className=\"mr-auto\">\r\n                <Nav.Item>\r\n                    <NavLink to='/' className=\"nav-link\" activeClassName='nav-link active' exact>\r\n                        Home\r\n                     </NavLink>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <NavLink to='/add' className=\"nav-link\" activeClassName='nav-link active' exact>\r\n                        New Question\r\n                     </NavLink>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <NavLink to='/leaderboard' className=\"nav-link\" activeClassName='nav-link active' exact>\r\n                        Leaders Board\r\n                     </NavLink>\r\n                </Nav.Item>\r\n            </Nav>\r\n        );\r\n    }\r\n\r\n    return <Fragment>{display}</Fragment>\r\n};\r\n\r\n\r\nexport default displayItems;","import React, { Fragment } from 'react';\r\n\r\nimport {Nav, Button } from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst logStatus = (props) => {\r\n    let logStat = (\r\n        <Nav.Item >\r\n            <NavLink to='/login'>\r\n                <Button variant=\"outline-success\" >Login</Button>\r\n            </NavLink>\r\n        </Nav.Item>\r\n    );\r\n    if (props.name) {\r\n        logStat = (\r\n            <Fragment>\r\n                <Nav.Item >\r\n                    <NavLink to='/logout'>\r\n                        <Button variant=\"outline-danger\" >Logout</Button>\r\n                    </NavLink>\r\n                </Nav.Item>\r\n                <Nav.Item style={{ marginLeft: '7px' }} >\r\n                    <NavLink to='/'>\r\n                        <Button variant=\"primary\" >{props.name}</Button>\r\n                    </NavLink>\r\n                </Nav.Item>\r\n            </Fragment>\r\n        );\r\n    };\r\n    return logStat\r\n\r\n\r\n};\r\n\r\nexport default logStatus;","import React from 'react';\r\n\r\nimport { Navbar} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faQuestionCircle } from '@fortawesome/free-regular-svg-icons';\r\nimport DisplayItems from '../NavigationItems/DisplayItems/DisplayItems';\r\nimport LogStatus from '../NavigationItems/LogStatus/LogStatus';\r\n\r\nconst toolbar = (props) => {\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand> <FontAwesomeIcon icon={faQuestionCircle} color='orange' /> </Navbar.Brand>\r\n            <DisplayItems user={props.userStatus} />\r\n            <LogStatus\r\n                name={props.userStatus ? props.userStatus.name : null} />\r\n        </Navbar>\r\n    );\r\n};\r\n\r\n\r\nexport default toolbar;","import React, { Component } from 'react';\r\n\r\nimport Toolbar from '../../components/Navigation/Toolbar/Toolbar';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Layout extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Toolbar userStatus={this.props.userStatus}/>\r\n                <main style={{marginTop:'32px'}}>\r\n                    {this.props.children }\r\n                </main>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        userStatus: state.User.loggedUser \r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Layout);","import React from 'react';\r\n\r\nimport {Card,ListGroup,ListGroupItem} from 'react-bootstrap';\r\n\r\nconst leaderboardUI = (props) => {\r\n    return (\r\n        <Card style={{ width: '18rem' }}>\r\n            <Card.Img variant=\"top\" src={props.user.avatarURL} />\r\n            <Card.Body>\r\n                <Card.Title>{props.user.name}</Card.Title>\r\n            </Card.Body>\r\n            <ListGroup className=\"list-group-flush\">\r\n                <ListGroupItem> Total Score - {props.totalPoints}</ListGroupItem>\r\n                <ListGroupItem> answer Score - {props.answersPoints}</ListGroupItem>\r\n                <ListGroupItem> question Score - {props.questionsPoints}</ListGroupItem>\r\n            </ListGroup>\r\n        </Card>\r\n    );\r\n};\r\n\r\n\r\nexport default leaderboardUI;\r\n","import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport LeaderboardsUI from '../../components/Leadersboard/LeadersboardUI';\r\n\r\nclass Leadersboard extends Component {\r\n    render() {\r\n        let allUsers = this.props.allUsers.map(user => {\r\n            const answersPoints = Object.values(user.answers).length\r\n            const questionsPoints = user.questions.length\r\n            const totalPoints = answersPoints + questionsPoints;\r\n            return <LeaderboardsUI  key={user.id} answersPoints={answersPoints} questionsPoints={questionsPoints} totalPoints={totalPoints} user={user} />\r\n        })\r\n        allUsers = allUsers.sort((a , b) => a.props.totalPoints - b.props.totalPoints).reverse()\r\n        console.log(allUsers)\r\n        return (\r\n            <div>\r\n                {allUsers}\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        allUsers: state.Home.allUsers\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Leadersboard);","import React from 'react';\r\n\r\nimport { Form, Col, Button } from 'react-bootstrap'\r\n\r\nconst newQuestionUI = (props) => {\r\n    return (\r\n        <Form validated>\r\n            <Form.Row>\r\n                <Col>\r\n                    <Form.Control placeholder=\"Option One\" value={props.optionOne} onChange={(event) => props.changed(event, 'optionOne')} required />\r\n                </Col>\r\n                <Col>\r\n                    <Form.Control placeholder=\"Option Two\" value={props.optionTwo} onChange={(event) => props.changed(event, 'optionTwo')} required />\r\n                </Col>\r\n            </Form.Row>\r\n            <Button\r\n                type=\"submit\"\r\n                disabled={!props.isValid}\r\n                onClick={(event) => props.submit(event)}>\r\n                Submit Question\r\n                 </Button>\r\n        </Form>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default newQuestionUI;","import React, { Component, Fragment } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport NewQuestionUI from '../../components/NewQuestionUI/NewQuestionUI';\r\n\r\nclass NewQuestion extends Component {\r\n    state = {\r\n        optionOne: {\r\n            value: '',\r\n            rules: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n        },\r\n        optionTwo: {\r\n            value: '',\r\n            rules: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n        },\r\n        validForm: false,\r\n    };\r\n    changeOptionValueHandler = (event, selectedOption) => {\r\n        let validForm = false;\r\n        const selectedOptionUpdated = {\r\n            ...this.state[selectedOption],\r\n            value: event.target.value,\r\n            valid: this.checkValid(event.target.value, this.state[selectedOption].rules)\r\n        };\r\n        this.setState({ [selectedOption]: selectedOptionUpdated }, () => {\r\n            if (this.state.optionOne.valid && this.state.optionTwo.valid) {\r\n                validForm = true;\r\n            }\r\n            this.setState({ validForm: validForm })\r\n        });\r\n    };\r\n    checkValid = (value, rules) => {\r\n        let isValid = true;\r\n        if (rules.required) {\r\n            isValid = value.trim() !== '' && isValid\r\n        };\r\n        return isValid;\r\n    };\r\n    submitFormHandler = (event) => {\r\n        event.preventDefault()\r\n        const questionInfo = {\r\n            optionOneText: this.state.optionOne.value,\r\n            optionTwoText: this.state.optionTwo.value,\r\n            author: this.props.loggedUser.id\r\n        }\r\n        this.props.onAddQuestion(questionInfo, this.props.onGetAllUsers)\r\n        this.props.history.push('/')\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Fragment>\r\n                <h1>Would you rather</h1>\r\n                <NewQuestionUI\r\n                changed={this.changeOptionValueHandler}\r\n                optionOne={this.state.optionOne.value}\r\n                optionTwo={this.state.optionTwo.value}\r\n                isValid={this.state.validForm}\r\n                submit={this.submitFormHandler} />\r\n            </Fragment>\r\n\r\n        );\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAddQuestion: (questionInfo, getAllUsers ) => dispatch(actions.addQuestionInit(questionInfo, getAllUsers)),\r\n        onGetAllUsers: () => dispatch(actions.setAllUsersInit())\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedUser: state.User.loggedUser,\r\n        allQuestions: state.Home.allQuestions\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewQuestion);","import React, { Component } from 'react';\nimport './App.css';\n\nimport {Spinner} from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport Login from './containers/User/Login/Login';\nimport Logout from './containers/User/Logout/Logout'\nimport Home from './containers/Home/Home';\nimport Layout from './hoc/Layout/Layout';\nimport Leadersboard from './containers/Leadersboard/Leadersboard';\nimport NewQuestion from './containers/NewQuestion/NewQuestion';\nimport * as actions from './store/actions/index';\nimport { Route, Switch, } from 'react-router-dom'\n\n\nclass App extends Component {\n  componentDidMount() {\n      this.props.onGetAllUsersInit()\n      this.props.onSetAllQuestions()\n      }\n  componentDidUpdate() {\n    if(!this.props.loggedUser && this.props.allQuestions && this.props.allUsers) {\n      this.props.onAutoLogin(this.props.allQuestions,this.props.allUsers)\n    }\n  }\n  render() {\n    let routes = (\n      <Switch>\n        <Route path='/login' component={Login} exact />\n        <Route path='/' component={Home} exact />\n        <Route render={() => this.props.loading ? <Spinner animation=\"border\" role=\"status\"/> : <h2>Please log in first</h2> } />\n      </Switch>\n\n    )\n    if (this.props.loggedUser) {\n      routes = (\n        <Switch>\n          <Route path='/login' component={Login} exact />\n          <Route path='/logout' component={Logout} exact />\n          <Route path='/leaderboard' component={Leadersboard} exact />\n          <Route path='/add' component={NewQuestion} exact />\n          <Route path='/questions/:id' component={Home} exact />\n          <Route path='/' component={Home} exact />\n          <Route render={() => this.props.loading ? <Spinner animation=\"border\" role=\"status\"/> :   <h2>404 page not found :( </h2> } />\n        </Switch>\n      );\n    }\n    return (\n      <Layout>\n        {routes}\n      </Layout>\n    );\n  };\n};\nconst mapStateToProps = state => {\n  return {          \n    loading: state.Home.loading,                                                                    \n    token: state.User.token,\n    loggedUser: state.User.loggedUser,\n    allQuestions: state.Home.allQuestions,\n    allUsers: state.Home.allUsers,\n    unAnsweredQuestions: state.User.unAnsweredQuestions,\n    answeredQuestions: state.User.answeredQuestions\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAutoLogin: (allQuestions,allUsers) => dispatch(actions.autoLoginInit(allQuestions,allUsers)),\n    onGetAllUsersInit: () => dispatch(actions.setAllUsersInit()),\n    onSetAllQuestions: () => dispatch(actions.setAllUsersQuestionsInit())\n  };\n};\n\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObj, newObj) => {\r\n    return {\r\n        ...oldObj,\r\n        ...newObj\r\n    };\r\n};","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../../utility/functions/functions';\r\n\r\nconst initalState = {\r\n    notAnsweredQuestions: [],\r\n    answeredQuestions: [],\r\n    loggedUser: null,\r\n    loading: false,\r\n    token: null\r\n};\r\n\r\nconst UserReducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n        //Loggin and filtering answeredQuestions and not answered Questions\r\n        case (actionTypes.LOGIN_USER): {\r\n            const answered = Object.keys(action.user.answers)\r\n            const answeredQuestions = action.allQuestions.filter(q => answered.includes(q.id))\r\n            const notAnsweredQuestions = action.allQuestions.filter(q => !answered.includes(q.id))\r\n            localStorage.setItem('token', action.user.id);\r\n            return updateObject(state, { loggedUser: action.user, notAnsweredQuestions: notAnsweredQuestions, answeredQuestions: answeredQuestions, token:action.token })\r\n        }\r\n        //Logging out.\r\n        case (actionTypes.LOGOUT_USER): {\r\n            localStorage.removeItem('token')\r\n            return updateObject(state, { loggedUser: null }) \r\n        }\r\n        default: return state;\r\n    };\r\n};\r\n\r\n\r\nexport default UserReducer;","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../../utility/functions/functions';\r\n\r\nconst initalState = {\r\n    allUsers: null,\r\n    allQuestions: null,\r\n    loading: false\r\n};\r\n\r\nconst HomeReducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n        //Getting all Questions\r\n        case (actionTypes.SET_ALL_USERS_QUESTIONS_START): {\r\n            return updateObject(state, { loading: true })\r\n        }\r\n        case (actionTypes.SET_ALL_USERS_QUESTIONS_SUCCESS): {\r\n            const allQuestionsSorted = Object.values(action.questions).sort((a, b) => {\r\n                return a.timestamp - b.timestamp\r\n            });\r\n            return updateObject(state, { allQuestions: allQuestionsSorted.reverse(), loading: false })\r\n        }\r\n        case (actionTypes.SET_ALL_USERS_QUESTIONS_FAIL): {\r\n            return updateObject(state, { loading: false })\r\n        }\r\n        //Getting all Users\r\n        case (actionTypes.GET_ALL_USERS_START): {\r\n            return updateObject(state, { loading: true })\r\n        }\r\n        case (actionTypes.GET_ALL_USERS_SUCCESS): {\r\n            return updateObject(state, { allUsers: action.users, loading: false})\r\n        }\r\n        case (actionTypes.GET_ALL_USERS_FAIL): {\r\n            return updateObject(state, { loading: false })\r\n        } \r\n\r\n\r\n        //Saving new Question\r\n        case (actionTypes.SAVE_QUESTION_ANSWER_START): {\r\n            return updateObject(state, { loading: true })\r\n        }\r\n        case (actionTypes.ADD_QUESTION_START): return (updateObject(state, { loading: true }))\r\n        case (actionTypes.ADD_QUESTION_SUCCESS): {\r\n            const updateAllQuestions = [action.newQuestion, ...state.allQuestions]\r\n            return updateObject(state, { allQuestions: updateAllQuestions, loading: false })\r\n        }\r\n        case (actionTypes.ADD_QUESTION_FAIL): return updateObject(state, { loading: false })\r\n\r\n        default: return state;\r\n    };\r\n};\r\n\r\nexport default HomeReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport { Provider} from 'react-redux';\nimport thunk  from 'redux-thunk'\nimport UserReducer from './store/reducers/User';\nimport HomeReducer from './store/reducers/Home';\n\nconst rootReducer = combineReducers({\n    User: UserReducer,\n    Home: HomeReducer\n});\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\n\nconst store = createStore( rootReducer, composeEnhancers( applyMiddleware(thunk) ) );\n\nconst app = (\n    <Provider store={ store }>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}