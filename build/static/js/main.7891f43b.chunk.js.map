{"version":3,"sources":["assets/Avatars/pic1.jpg","assets/Avatars/pic2.jpg","assets/Avatars/pic3.jpg","components/User/Login/LoginUI.js","DataBase.js","store/actions/actionTypes.js","store/actions/User.js","store/actions/Home.js","containers/User/Login/Login.js","containers/User/Logout/Logout.js","components/Questions/Question/QuestionUI.js","components/Answers/AnswerUI/AnswerUI.js","components/Questions/QuestionsUI.js","components/Questions/FullQuestion/FullQuestion.js","components/Answers/FullAnswer/FullAnswer.js","containers/Home/HomeUtility/Render.js","containers/Home/Home.js","components/Navigation/NavigationItems/DisplayItems/DisplayItems.js","components/Navigation/NavigationItems/LogStatus/LogStatus.js","components/Navigation/Toolbar/Toolbar.js","hoc/Layout/Layout.js","components/Leadersboard/LeadersboardUI.js","containers/Leadersboard/Leadersboard.js","components/NewQuestionUI/NewQuestionUI.js","containers/NewQuestion/NewQuestion.js","App.js","serviceWorker.js","utility/functions/functions.js","store/reducers/User.js","store/reducers/Home.js","index.js"],"names":["module","exports","loginUI","props","allUsers","displayUsers","user","push","map","key","id","value","name","Card","style","width","margin","Body","Title","Form","userToBeLogged","onChange","changeUser","defaultValue","hidden","Button","disabled","onClick","clickedLog","marginTop","display","users","sarahedo","avatarURL","pic1","answers","questions","tylermcginnis","pic2","johndoe","pic3","author","timestamp","optionOne","votes","text","optionTwo","_saveQuestion","question","Promise","res","rej","authedUser","formattedQuestion","optionOneText","optionTwoText","Math","random","toString","substring","Date","now","formatQuestion","setTimeout","concat","_saveQuestionAnswer","qid","answer","logInUserInit","userID","allQuestions","token","filter","userObj","type","setAllUsersQuestionsInit","dispatch","then","setAllUsersQuestionsSuccess","catch","error","setAllUsersInit","Object","values","getAllUsersSuccess","Login","state","selectUserHandler","event","setState","target","onLoginHandler","preventDefault","onLoginUser","displayLogin","Spinner","animation","this","LoginUI","loggedUser","to","Component","connect","Home","User","actions","Logout","logoutUser","questionUI","userName","Img","variant","src","avatar","Text","answerUI","questionsUI","unAnsweredQuestions","answeredQuestions","showAnswers","Col","sm","QuestionUI","showFullPollFunc","notAnsweredQuestions","AnswerUI","showFullAnswered","Container","Row","switchQA","marginLeft","fullQuestion","console","log","bg","as","color","chooseOption","saveQuestion","history","submitAnswer","fullAnswer","questionKeyId","join","pickedQuestion","numberOfVotes","length","progressPrecent","optionOnePrecent","toFixed","optionTwoPrecent","displayCard","CardGroup","Header","ListGroup","Item","ProgressBar","label","UtilityRenderHome","path","exact","render","routeProps","QuestionsUI","fullQuestions","FullQuestion","cancelFullPoll","fullAnswers","FullAnswer","canceled","cancelFullAnswer","loading","role","questionAnswered","showAnswersHandler","prevState","chooseOptionHandler","option","saveQuestionHandler","qID","questionInfo","onSaveAnswerInit","onSetAllUsersInit","onSetAllQuestions","allQuestionsCopy","homeUI","dataAPI","response","displayItems","Nav","className","activeClassName","logStatus","logStat","toolbar","Navbar","Brand","icon","faQuestionCircle","DisplayItems","userStatus","LogStatus","Layout","Toolbar","children","leaderboardUI","ListGroupItem","totalPoints","answersPoints","questionsPoints","Leadersboard","sort","a","b","reverse","newQuestionUI","validated","Control","placeholder","changed","required","isValid","submit","NewQuestion","rules","valid","validForm","changeOptionValueHandler","selectedOption","selectedOptionUpdated","checkValid","trim","submitFormHandler","onAddQuestion","NewQuestionUI","newQuestion","err","App","onGetAllUsersInit","onAutoLogin","routes","component","localStorage","getItem","Boolean","window","location","hostname","match","updateObject","oldObj","newObj","initalState","UserReducer","action","answered","keys","q","includes","setItem","removeItem","HomeReducer","allQuestionsSorted","updateAllQuestions","rootReducer","combineReducers","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","app","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7891f43b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pic1.007abbb5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pic2.06f20a9c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pic3.771edd67.jpg\";","import React, { Fragment } from 'react';\r\n\r\nimport { Card, Button, Form } from 'react-bootstrap'\r\n\r\nconst loginUI = (props) => {\r\n    const { allUsers } = props\r\n    let displayUsers = []\r\n    for (let user of allUsers) {\r\n        displayUsers.push(user)\r\n    };\r\n    displayUsers = displayUsers.map(user => {\r\n        return <option key={user.id} value={user.id}> {user.name} </option>\r\n    });\r\n\r\n    return (\r\n        <Fragment>\r\n            <Card style={{ width: '18rem',margin:'0 auto'}}>\r\n                <Card.Body>\r\n                    <Card.Title>Select User</Card.Title>\r\n                        <Form >\r\n                            <select value={props.userToBeLogged} onChange={props.changeUser} >\r\n                                <option defaultValue hidden>Choose User</option>\r\n                                {displayUsers}\r\n                            </select>\r\n                            <Button\r\n                                disabled={props.userToBeLogged === ''}\r\n                                onClick={props.clickedLog}\r\n                                style={{ marginTop: '10px', display: 'flex' }}>\r\n                                Submit\r\n                             </Button>\r\n                        </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\n\r\nexport default loginUI;","import pic1 from './assets/Avatars/pic1.jpg'\r\nimport pic2 from './assets/Avatars/pic2.jpg'\r\nimport pic3 from './assets/Avatars/pic3.jpg'\r\n\r\nlet users = {\r\n    sarahedo: {\r\n      id: 'sarahedo',\r\n      name: 'Sarah Edo',\r\n      avatarURL: pic1,\r\n      answers: {\r\n        \"8xf0y6ziyjabvozdd253nd\": 'optionOne',\r\n        \"6ni6ok3ym7mf1p33lnez\": 'optionTwo',\r\n        \"am8ehyc8byjqgar0jgpub9\": 'optionTwo',\r\n        \"loxhs1bqm25b708cmbf3g\": 'optionTwo'\r\n      },\r\n      questions: ['8xf0y6ziyjabvozdd253nd', 'am8ehyc8byjqgar0jgpub9']\r\n    },\r\n    tylermcginnis: {\r\n      id: 'tylermcginnis',\r\n      name: 'Tyler McGinnis',\r\n      avatarURL: pic2,\r\n      answers: {\r\n        \"vthrdm985a262al8qx3do\": 'optionOne',\r\n        \"xj352vofupe1dqz9emx13r\": 'optionTwo',\r\n      },\r\n      questions: ['loxhs1bqm25b708cmbf3g', 'vthrdm985a262al8qx3do'],\r\n    },\r\n    johndoe: {\r\n      id: 'johndoe',\r\n      name: 'John Doe',\r\n      avatarURL: pic3,\r\n      answers: {\r\n        \"xj352vofupe1dqz9emx13r\": 'optionOne',\r\n        \"vthrdm985a262al8qx3do\": 'optionTwo',\r\n        \"6ni6ok3ym7mf1p33lnez\": 'optionTwo'\r\n      },\r\n      questions: ['6ni6ok3ym7mf1p33lnez', 'xj352vofupe1dqz9emx13r'],\r\n    }\r\n  }\r\n  \r\n  let questions = {\r\n    \"8xf0y6ziyjabvozdd253nd\": {\r\n      id: '8xf0y6ziyjabvozdd253nd',\r\n      author: 'sarahedo',\r\n      timestamp: 1467166872634,\r\n      optionOne: {\r\n        votes: ['sarahedo'],\r\n        text: 'have horrible short term memory',\r\n      },\r\n      optionTwo: {\r\n        votes: [],\r\n        text: 'have horrible long term memory'\r\n      }\r\n    },\r\n    \"6ni6ok3ym7mf1p33lnez\": {\r\n      id: '6ni6ok3ym7mf1p33lnez',\r\n      author: 'johndoe',\r\n      timestamp: 1468479767190,\r\n      optionOne: {\r\n        votes: [],\r\n        text: 'become a superhero',\r\n      },\r\n      optionTwo: {\r\n        votes: ['johndoe', 'sarahedo'],\r\n        text: 'become a supervillain'\r\n      }\r\n    },\r\n    \"am8ehyc8byjqgar0jgpub9\": {\r\n      id: 'am8ehyc8byjqgar0jgpub9',\r\n      author: 'sarahedo',\r\n      timestamp: 1488579767190,\r\n      optionOne: {\r\n        votes: [],\r\n        text: 'be telekinetic',\r\n      },\r\n      optionTwo: {\r\n        votes: ['sarahedo'],\r\n        text: 'be telepathic'\r\n      }\r\n    },\r\n    \"loxhs1bqm25b708cmbf3g\": {\r\n      id: 'loxhs1bqm25b708cmbf3g',\r\n      author: 'tylermcginnis',\r\n      timestamp: 1482579767190,\r\n      optionOne: {\r\n        votes: [],\r\n        text: 'be a front-end developer',\r\n      },\r\n      optionTwo: {\r\n        votes: ['sarahedo'],\r\n        text: 'be a back-end developer'\r\n      }\r\n    },\r\n    \"vthrdm985a262al8qx3do\": {\r\n      id: 'vthrdm985a262al8qx3do',\r\n      author: 'tylermcginnis',\r\n      timestamp: 1489579767190,\r\n      optionOne: {\r\n        votes: ['tylermcginnis'],\r\n        text: 'find $50 yourself',\r\n      },\r\n      optionTwo: {\r\n        votes: ['johndoe'],\r\n        text: 'have your best friend find $500'\r\n      }\r\n    },\r\n    \"xj352vofupe1dqz9emx13r\": {\r\n      id: 'xj352vofupe1dqz9emx13r',\r\n      author: 'johndoe',\r\n      timestamp: 1493579767190,\r\n      optionOne: {\r\n        votes: ['johndoe'],\r\n        text: 'write JavaScript',\r\n      },\r\n      optionTwo: {\r\n        votes: ['tylermcginnis'],\r\n        text: 'write Swift'\r\n      }\r\n    },\r\n  }\r\n  \r\n  function generateUID () {\r\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\r\n  }\r\n  \r\n  export function _getUsers () {\r\n    return new Promise((res, rej) => {\r\n      setTimeout(() => res({...users}), 1000)\r\n    })\r\n  }\r\n  \r\n  export function _getQuestions () {\r\n    return new Promise((res, rej) => {\r\n      setTimeout(() => res({...questions}), 1000)\r\n    })\r\n  }\r\n  \r\n  function formatQuestion ({ optionOneText, optionTwoText, author }) {\r\n    return {\r\n      id: generateUID(),\r\n      timestamp: Date.now(),\r\n      author,\r\n      optionOne: {\r\n        votes: [],\r\n        text: optionOneText,\r\n      },\r\n      optionTwo: {\r\n        votes: [],\r\n        text: optionTwoText,\r\n      }\r\n    }\r\n  }\r\n  \r\n  export function _saveQuestion (question) {\r\n    return new Promise((res, rej) => {\r\n      const authedUser = question.author;\r\n      const formattedQuestion = formatQuestion(question);\r\n  \r\n      setTimeout(() => {\r\n        questions = {\r\n          ...questions,\r\n          [formattedQuestion.id]: formattedQuestion\r\n        }\r\n        \r\n        users = {\r\n          ...users,\r\n          [authedUser]: {\r\n            ...users[authedUser],\r\n            questions: users[authedUser].questions.concat([formattedQuestion.id])\r\n          }\r\n        }\r\n  \r\n        res(formattedQuestion)\r\n      }, 1000)\r\n    })\r\n  }\r\n  \r\n  export function _saveQuestionAnswer ({ authedUser, qid, answer }) {\r\n    return new Promise((res, rej) => {\r\n      setTimeout(() => {\r\n        users = {\r\n          ...users,\r\n          [authedUser]: {\r\n            ...users[authedUser],\r\n            answers: {\r\n              ...users[authedUser].answers,\r\n              [qid]: answer\r\n            }\r\n          }\r\n        }\r\n  \r\n        questions = {\r\n          ...questions,\r\n          [qid]: {\r\n            ...questions[qid],\r\n            [answer]: {\r\n              ...questions[qid][answer],\r\n              votes: questions[qid][answer].votes.concat([authedUser])\r\n            }\r\n          }\r\n        }\r\n  \r\n        res()\r\n      }, 500)\r\n    })\r\n  }","export const LOGIN_USER = 'LOGIN_USER';\r\nexport const LOGOUT_USER = 'LOGOUT_USER';\r\nexport const AUTO_LOGIN = 'AUTO_LOGIN';\r\n\r\nexport const GET_ALL_USERS_START   =  'GET_ALL_USERS_START';\r\nexport const GET_ALL_USERS_SUCCESS =  'GET_ALL_USERS_SUCCESS';\r\nexport const GET_ALL_USERS_FAIL    =  'GET_ALL_USERS_FAIL';\r\n\r\n\r\nexport const SET_ALL_USERS_QUESTIONS_START =    'SET_ALL_USERS_QUESTIONS_START';\r\nexport const SET_ALL_USERS_QUESTIONS_SUCCESS =  'SET_ALL_USERS_QUESTIONS_SUCCESS';\r\nexport const SET_ALL_USERS_QUESTIONS_FAIL =     'SET_ALL_USERS_QUESTIONS_FAIL';\r\n\r\nexport const SAVE_QUESTION_ANSWER_START = 'SAVE_QUESTION_ANSWER_START';\r\nexport const SAVE_QUESTION_ANSWER_SUCCESS = 'SAVE_QUESTION_ANSWER_SUCCESS';\r\nexport const SAVE_QUESTION_ANSWER_FAIL = 'SAVE_QUESTION_ANSWER_FAIL';\r\n\r\nexport const ADD_QUESTION_START = 'ADD_QUESTION_START';\r\nexport const ADD_QUESTION_SUCCESS = 'ADD_QUESTION_SUCCESS';\r\nexport const ADD_QUESTION_FAIL = 'ADD_QUESTION_FAIL';","import * as dataAPI from '../../DataBase';\r\nimport * as actionTypes from './actionTypes';\r\n\r\n\r\n\r\nexport const logInUserInit = (userID, allQuestions, allUsers, token) => {\r\n    let user = allUsers.filter((userObj) => {\r\n        return userObj.id === userID\r\n    })\r\n    user = user[0]\r\n    return { type: actionTypes.LOGIN_USER, user: user, allQuestions: allQuestions, token: token }\r\n};\r\nexport const logOutUserInit = () => {\r\n    return { type: actionTypes.LOGOUT_USER }\r\n};\r\nexport const autoLoginInit = (allQuestions, allUsers) => {\r\n    return dispatch => {\r\n        const token = localStorage.getItem('token')\r\n        if (token) {\r\n            dispatch(logInUserInit(token, allQuestions, allUsers, token))\r\n        }\r\n        else dispatch(logOutUserInit())\r\n    };\r\n};\r\n\r\n\r\nconst saveQuestionAnswerStart = () => {\r\n    return { type: actionTypes.SAVE_QUESTION_ANSWER_START }\r\n};\r\nconst saveQuestionAnswerSuccess = () => {\r\n    return { type: actionTypes.SAVE_QUESTION_ANSWER_SUCCESS }\r\n};\r\nconst saveQuestionAnswerFail = () => {\r\n    return { type: actionTypes.SAVE_QUESTION_ANSWER_FAIL }\r\n};\r\nexport const saveQuestionInit = ({ authedUser, qid, answer }) => {\r\n    return dispatch => {\r\n        dispatch(saveQuestionAnswerStart())\r\n        dataAPI._saveQuestionAnswer({ authedUser, qid, answer })\r\n            .then(response => dispatch(saveQuestionAnswerSuccess()))\r\n            .catch(error => dispatch(saveQuestionAnswerFail(error)))\r\n    };\r\n};","import * as dataAPI from '../../DataBase';\r\nimport * as actionTypes from './actionTypes';\r\n\r\n\r\n//Getting All Questions.\r\nconst setAllUsersQuestionsStart = () => {\r\n    return { type: actionTypes.SET_ALL_USERS_QUESTIONS_START }\r\n};\r\nconst setAllUsersQuestionsSuccess = (questions) => {\r\n    return { type: actionTypes.SET_ALL_USERS_QUESTIONS_SUCCESS, questions: questions }\r\n};\r\nconst setAllUsersQuestionsFail = () => {\r\n    return { type: actionTypes.SET_ALL_USERS_QUESTIONS_FAIL }\r\n};\r\nexport const setAllUsersQuestionsInit = () => {\r\n    return dispatch => {\r\n        dispatch(setAllUsersQuestionsStart())\r\n        dataAPI._getQuestions()\r\n            .then(questions => dispatch(setAllUsersQuestionsSuccess(questions)))\r\n            .catch(error => dispatch(setAllUsersQuestionsFail(error)))\r\n    };\r\n};\r\n\r\n//Getting All Users.\r\nconst getAllUsersStart = () => {\r\n    return { type: actionTypes.GET_ALL_USERS_START };\r\n};\r\nconst getAllUsersSuccess = (users) => {\r\n    const usersArr = Object.values(users);\r\n    return { type: actionTypes.GET_ALL_USERS_SUCCESS, users: usersArr };\r\n};\r\nconst getAllUsersFail = () => {\r\n    return { type: actionTypes.GET_ALL_USERS_FAIL };\r\n};\r\nexport const setAllUsersInit = () => {\r\n    return dispatch => {\r\n        dispatch(getAllUsersStart())\r\n        dataAPI._getUsers()\r\n            .then(users => dispatch(getAllUsersSuccess(users)))\r\n            .catch(error => dispatch(getAllUsersFail(error)))\r\n    };\r\n}; \r\n\r\n//Answering Question\r\nconst saveQuestionAnswerStart = () => {\r\n    return { type: actionTypes.SAVE_QUESTION_ANSWER_START }\r\n};\r\nconst saveQuestionAnswerSuccess = () => {\r\n    return { type: actionTypes.SAVE_QUESTION_ANSWER_SUCCESS }\r\n};\r\nconst saveQuestionAnswerFail = () => {\r\n    return { type: actionTypes.SAVE_QUESTION_ANSWER_FAIL }\r\n};\r\nexport const saveQuestionInit = ({ authedUser, qid, answer }) => {\r\n    return dispatch => {\r\n        dispatch(saveQuestionAnswerStart())\r\n        dataAPI._saveQuestionAnswer({ authedUser, qid, answer })\r\n            .then(response => dispatch(saveQuestionAnswerSuccess()))\r\n            .catch(error => dispatch(saveQuestionAnswerFail(error)))\r\n    };\r\n};\r\n\r\n//Adding a Question\r\nconst addQuestionStart = () => {\r\n    return {type: actionTypes.ADD_QUESTION_START}\r\n};\r\nconst addQuestionSuccess = (newQuestion) => {\r\n    return {type: actionTypes.ADD_QUESTION_SUCCESS, newQuestion: newQuestion}\r\n};\r\nconst addQuestionFail = (error) => {\r\n    return {type: actionTypes.ADD_QUESTION_FAIL}\r\n};\r\nexport const addQuestionInit= (questionInfo) => {\r\n    return dispatch => {\r\n        dispatch( addQuestionStart() )\r\n        dataAPI._saveQuestion(questionInfo)\r\n        .then( res => dispatch( addQuestionSuccess( res ) ) )\r\n        .catch( err => ( dispatch( addQuestionFail( err ) ) ) )\r\n    };\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport LoginUI from '../../../components/User/Login/LoginUI';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\n\r\nclass Login extends Component {\r\n    state = { \r\n        user: ''\r\n    };\r\n\r\n    selectUserHandler = (event) => {\r\n        this.setState({ user: event.target.value })\r\n    };\r\n    onLoginHandler = (event) => {\r\n        event.preventDefault();\r\n        let userToBeLogged = this.props.allUsers.filter(user => {\r\n            return user.id === this.state.user\r\n        });\r\n        userToBeLogged = userToBeLogged[0]\r\n        this.props.onLoginUser(userToBeLogged.id, this.props.allQuestions, this.props.allUsers)\r\n    };\r\n\r\n    render() {\r\n        let displayLogin =  <Spinner animation=\"border\" />\r\n        if (this.props.allUsers) {\r\n            displayLogin = (\r\n                <LoginUI\r\n                    changeUser={this.selectUserHandler}\r\n                    userToBeLogged={this.state.user}\r\n                    clickedLog={this.onLoginHandler}\r\n                    allUsers={this.props.allUsers} />\r\n            );\r\n        };\r\n        if (this.props.loggedUser) { displayLogin = <Redirect to='/' /> }\r\n\r\n        return <div> {displayLogin} </div> \r\n    };\r\n};\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        allQuestions: state.Home.allQuestions,\r\n        allUsers: state.Home.allUsers,\r\n        loggedUser: state.User.loggedUser !== null\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return { onLoginUser: (user, allQuestions, allUsers) => dispatch(actions.logInUserInit(user, allQuestions, allUsers)) };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React, { Component } from 'react';\r\n\r\nimport * as actions from '../../../store/actions/index';\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n\r\nclass Logout extends Component {\r\n    componentDidMount() { this.props.logoutUser() }\r\n  \r\n    render() {\r\n        return  <div> <Redirect to='/Login'/> </div> \r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {   logoutUser: () => dispatch( actions.logOutUserInit() ) };\r\n};\r\n\r\nexport default connect(null,mapDispatchToProps)(Logout);","import React, { Fragment } from 'react';\r\n\r\nimport { Card, Button } from 'react-bootstrap'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nconst questionUI = (props) => {\r\n    const { userName, question } = props\r\n\r\n    return (\r\n        <Fragment>\r\n            <Card style={{ width: '18rem' }}>\r\n                <Card.Img variant=\"top\" src={props.avatar} />\r\n                <Card.Body>\r\n                    <Card.Title> Asked By - {userName} </Card.Title>\r\n                    <Card.Text>\r\n                        optionOne - {question.optionOne.text}\r\n                    </Card.Text>\r\n                    <NavLink to={`/questions/${question.id}`}>\r\n                        <Button variant=\"primary\" >Watch Full question</Button>\r\n                    </NavLink>\r\n                </Card.Body>\r\n            </Card>\r\n        </Fragment>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default questionUI;","import React from 'react';\r\n\r\nimport { Card, Button } from 'react-bootstrap';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst answerUI = (props) => {\r\n    const { userName, question } = props\r\n    return (\r\n        <Card style={{ width: '18rem' }}>\r\n            <Card.Img variant=\"top\" src={props.avatar} />\r\n            <Card.Body>\r\n                <Card.Title> Asked By - {userName} </Card.Title>\r\n                <Card.Text>\r\n                    optionOne - {question.optionOne.text}\r\n                </Card.Text>\r\n                <NavLink to={`/questions/${question.id}`}>\r\n                    <Button variant=\"primary\" >Watch Full answer INFO</Button>\r\n                </NavLink>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default answerUI;","import React from 'react';\r\n\r\nimport { Container, Row, Col, Button } from 'react-bootstrap';\r\nimport QuestionUI from './Question/QuestionUI';\r\nimport AnswerUI from '../Answers/AnswerUI/AnswerUI';\r\n\r\nconst questionsUI = (props) => {\r\n    const unAnsweredQuestions = [];\r\n    const answeredQuestions = [];\r\n    if (!props.showAnswers)\r\n        for (let question of props.notAnsweredQuestions) {\r\n            const avatar = props.allUsers.filter(user => user.id === question.author)[0].avatarURL\r\n            const userName = props.allUsers.filter(user => user.id === question.author)[0].name\r\n            unAnsweredQuestions.push(\r\n                <Col sm key={question.id}>\r\n                    <QuestionUI\r\n                        avatar={avatar}\r\n                        showFullPollFunc={props.showFullPollFunc}\r\n                        allUsers={props.allUsers}\r\n                        question={question}\r\n                        userName={userName} />\r\n                </Col>\r\n            );\r\n        };\r\n    if (props.showAnswers) {\r\n        for (let question of props.answeredQuestions) {\r\n            const userName = props.allUsers.filter(user => user.id === question.author)[0].name\r\n            const avatar = props.allUsers.filter(user => user.id === question.author)[0].avatarURL\r\n            answeredQuestions.push(\r\n                <Col sm key={question.id}>\r\n                    <AnswerUI\r\n                        avatar={avatar}\r\n                        showFullAnswered={props.showFullAnswered}\r\n                        allUsers={props.allUsers}\r\n                        question={question}\r\n                        userName={userName} />\r\n                </Col>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container style={{ display: 'flex' }} >\r\n            <Row style={{ display: 'block' }}>\r\n                <Button onClick={props.switchQA}  style={{display:'block',margin: '0 auto'}}> Questions</Button>\r\n                {unAnsweredQuestions}\r\n            </Row>\r\n            <Row style={{ display: 'block',marginLeft:'auto' }}>\r\n                <Button onClick={props.switchQA} style={{display:'block',margin: '0 auto'}}>answered Questions</Button>\r\n                {answeredQuestions}\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\n\r\nexport default questionsUI;","import React from 'react';\r\n\r\nimport { Card, Button } from 'react-bootstrap'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nconst fullQuestion = (props) => {\r\n\r\n    console.log(props)\r\n    const { question } = props\r\n    const userName = props.allUsers.filter(user => user.id === question.author)[0].name\r\n    let fullQuestion = (\r\n        <Card bg='info' text='white' style={{ width: '18rem' }}>\r\n            <Card.Img variant=\"top\" src={props.user.avatarURL} />\r\n            <Card.Body>\r\n                <Card.Title> Asked By - {userName} </Card.Title>\r\n                <Card.Text as='div'>\r\n                    <p>Would you rather</p>\r\n                    <hr/>\r\n                    <Button\r\n                        style={{ color: 'white' }}\r\n                        variant='outline-warning'\r\n                        onClick={() => props.chooseOption('optionOne')}>\r\n                        option One - {question.optionOne.text}\r\n                    </Button>\r\n                    <hr />\r\n                    <Button\r\n                        variant='outline-warning'\r\n                        style={{ color: 'white' }}\r\n                        onClick={() => props.chooseOption('optionTwo')}>\r\n                        option Two - {question.optionTwo.text}\r\n                    </Button>\r\n                </Card.Text>\r\n                <hr />\r\n                <Button variant=\"primary\" onClick={() => props.saveQuestion(question.id)} > Submit</Button>\r\n                <Button variant=\"danger\"  onClick={ () => props.history.push('/') }  >Cancel</Button>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n    if (props.submitAnswer) {\r\n        fullQuestion = <div> <Redirect to='/' /> </div>\r\n    }\r\n    return (\r\n        <div>\r\n            {fullQuestion}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default fullQuestion;","import React,{ Fragment } from 'react';\r\n\r\nimport { ProgressBar } from 'react-bootstrap'\r\nimport { Card, ListGroup, CardGroup, Button} from 'react-bootstrap';\r\n\r\nconst fullAnswer = (props) => {\r\n    console.log(props)\r\n    const { question, user } = props;\r\n    const questionKeyId = Object.values({ ...question.id }).join('');\r\n    const { [questionKeyId]: questionID } = user.answers;\r\n    const pickedQuestion = questionID;\r\n    const numberOfVotes = question.optionOne.votes.length + question.optionTwo.votes.length;\r\n    const progressPrecent = numberOfVotes * 100;\r\n    const optionOnePrecent = ((question.optionOne.votes.length * 100) / progressPrecent * 100).toFixed();\r\n    const optionTwoPrecent = ((question.optionTwo.votes.length * 100) / progressPrecent * 100).toFixed();\r\n    let displayCard = (\r\n        <CardGroup>\r\n            <Card style={{ width: '18rem' }} bg=\"success\" text=\"white\" >\r\n                <Card.Header>Option One - {question.optionOne.text}</Card.Header>\r\n                <ListGroup variant=\"flush\" style={{color:'black'}}>\r\n                    <ListGroup.Item>Number of people voted for this - {question.optionOne.votes.length} out of {numberOfVotes}</ListGroup.Item>\r\n                    <ListGroup.Item> <ProgressBar now={optionOnePrecent} label={`${optionOnePrecent}%`} /> </ListGroup.Item>\r\n                </ListGroup>\r\n            </Card>\r\n            <Card style={{ width: '18rem' }}>\r\n                <Card.Header>Option Two - {question.optionTwo.text}</Card.Header>\r\n                <ListGroup variant=\"success\" >\r\n                    <ListGroup.Item>Number of people voted for this - {question.optionTwo.votes.length} out of {numberOfVotes}  </ListGroup.Item>\r\n                    <ListGroup.Item><ProgressBar now={optionTwoPrecent} label={`${optionTwoPrecent}%`} /></ListGroup.Item>\r\n                </ListGroup>\r\n            </Card>\r\n        </CardGroup>\r\n    );\r\n\r\n\r\n    if (pickedQuestion === 'optionTwo') {\r\n        displayCard = (\r\n            <CardGroup>\r\n                <Card style={{ width: '18rem' }} >\r\n                    <Card.Header>Option One - {question.optionOne.text}</Card.Header>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item>Number of people voted for this - {question.optionOne.votes.length} out of {numberOfVotes}</ListGroup.Item>\r\n                        <ListGroup.Item> <ProgressBar now={optionOnePrecent} label={`${optionOnePrecent}%`} /> </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Card>\r\n                <Card style={{ width: '18rem' }} bg=\"success\" text=\"white\">\r\n                    <Card.Header>Option Two - {question.optionTwo.text}</Card.Header>\r\n                    <ListGroup variant=\"flush\" style={{color:'black'}}>\r\n                        <ListGroup.Item>Number of people voted for this - {question.optionTwo.votes.length} out of {numberOfVotes}  </ListGroup.Item>\r\n                        <ListGroup.Item><ProgressBar now={optionTwoPrecent} label={`${optionTwoPrecent}%`} /></ListGroup.Item>\r\n                    </ListGroup>\r\n                </Card>\r\n            </CardGroup>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            {displayCard}\r\n            <Button variant='danger'  onClick={ () => props.history.push('/') } >GoBack</Button>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\n\r\nexport default fullAnswer;","import React from 'react';\r\n\r\nimport QuestionsUI from '../../../components/Questions/QuestionsUI';\r\nimport FullQuestion from '../../../components/Questions/FullQuestion/FullQuestion';\r\nimport FullAnswer from '../../../components/Answers/FullAnswer/FullAnswer';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { Route } from 'react-router-dom';\r\n\r\nconst UtilityRenderHome = (props) => {\r\n    let allQuestions = ''\r\n    //Showing all questions/Answers\r\n    if (props.notAnsweredQuestions && props.user) {\r\n        allQuestions = <Route\r\n            path='/'\r\n            exact\r\n            render={(routeProps) => <QuestionsUI\r\n                {...props}\r\n                {...routeProps}\r\n                showAnswers={props.showAnswers}\r\n                switchQA={props.switchQA}\r\n                allUsers={props.allUsers}\r\n                answeredQuestions={props.answeredQuestions}\r\n                notAnsweredQuestions={props.notAnsweredQuestions}\r\n                user={props.user}\r\n            />\r\n            }\r\n        />\r\n    }\r\n  //Routes for showing a clicked  Question\r\n    const fullQuestions = props.notAnsweredQuestions.map(question => {\r\n        return <Route\r\n            exact\r\n            key={question.id}\r\n            path={`/questions/${question.id}`}\r\n            render={(routeProps) => <FullQuestion\r\n                {...props}\r\n                {...routeProps}\r\n                user={props.user}\r\n                submitAnswer={props.submitAnswer}\r\n                chooseOption={props.chooseOption}\r\n                saveQuestion={props.saveQuestion}\r\n                allUsers={props.allUsers}\r\n                cancelFullPoll={props.cancelFullPoll}\r\n                question={question}\r\n            />\r\n            }\r\n        />\r\n    });\r\n    //Routes for showing a clicked answered Question\r\n    const fullAnswers = props.answeredQuestions.map(answer => {\r\n        return <Route\r\n            exact\r\n            key={answer.id}\r\n            path={`/questions/${answer.id}`}\r\n            render={(routeProps) => <FullAnswer\r\n                {...props}\r\n                {...routeProps}\r\n                canceled={props.cancelFullAnswer}\r\n                user={props.user}\r\n                question={answer}\r\n            />\r\n            }\r\n        />\r\n    });\r\n    //Spinner if loading is true.\r\n    if (props.loading) {\r\n        allQuestions = <Spinner animation=\"border\" role=\"status\" />\r\n    };\r\n    return (\r\n        <div>\r\n            {allQuestions}\r\n            {fullQuestions}\r\n            {fullAnswers}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default UtilityRenderHome;","import React, { Component } from 'react';\r\n\r\n\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport { Spinner } from 'react-bootstrap'\r\nimport UtilityRenderHome from './HomeUtility/Render'\r\n\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        showAnswers: false,\r\n        submitAnswer: false,\r\n        chooseOption: '',\r\n        allQuestions: null,\r\n        questionAnswered: null\r\n    };\r\n    componentDidMount() {\r\n        if (this.props.allQuestions) {\r\n            const allQuestionsCopy = [...this.props.allQuestions]\r\n            this.setState({ allQuestions: allQuestionsCopy })\r\n        };  \r\n    };\r\n    componentDidUpdate() {\r\n        if ( this.state.allQuestions) {\r\n            if (this.state.allQuestions.length !== this.props.allQuestions.length) {\r\n                const allQuestionsCopy = [...this.props.allQuestions]\r\n                this.setState({ allQuestions: allQuestionsCopy })\r\n                let userToBeLogged = this.props.allUsers.filter(user => {\r\n                    return user.id === this.props.loggedUser.id\r\n                });\r\n                userToBeLogged = userToBeLogged[0]\r\n                this.setState({ allQuestions: allQuestionsCopy }, () => {\r\n                    this.props.onLoginUser(userToBeLogged.id, this.props.allQuestions, this.props.allUsers)\r\n                })\r\n            }\r\n        }\r\n       if ((this.state.submitAnswer && !this.props.loading)) {\r\n            let userToBeLogged = this.props.allUsers.filter(user => {\r\n                return user.id === this.props.loggedUser.id\r\n            });\r\n            userToBeLogged = userToBeLogged[0]\r\n            this.props.onLoginUser(userToBeLogged.id, this.props.allQuestions, this.props.allUsers)\r\n            this.setState({ submitAnswer: false }, () => {\r\n                this.props.history.push(`/questions/${this.state.questionAnswered}`)\r\n            })\r\n        };\r\n    };\r\n    //Switch Between Answered Questions/Not answered\r\n    showAnswersHandler = () => {\r\n        this.setState(prevState => ({ showAnswers: !prevState.showAnswers }))\r\n    };\r\n    //Choosing an option inside a poll\r\n    chooseOptionHandler = (option) => {\r\n        this.setState({ chooseOption: option })\r\n    };\r\n    //Submiting the Question \r\n    saveQuestionHandler = (qID) => {\r\n        const questionInfo = {\r\n            authedUser: this.props.loggedUser.id,\r\n            qid: qID,\r\n            answer: this.state.chooseOption\r\n        };\r\n        this.props.onSaveAnswerInit(questionInfo)\r\n        this.props.onSetAllUsersInit()\r\n        this.props.onSetAllQuestions()\r\n        this.setState({ submitAnswer: true,  questionAnswered: qID })\r\n    };\r\n\r\n    render() {\r\n        let homeUI = <p>Please Log In </p>\r\n        if (this.props.loading) {\r\n            homeUI = <Spinner animation=\"border\" role=\"status\" />\r\n        }\r\n        if (this.props.loggedUser && !this.props.loading) {\r\n            homeUI = (\r\n                <UtilityRenderHome\r\n                    user={this.props.loggedUser}\r\n                    submitAnswer={this.state.submitAnswer}\r\n                    allUsers={this.props.allUsers}\r\n                    showAnswers={this.state.showAnswers}\r\n                    answeredQuestions={this.props.answeredQuestions}\r\n                    notAnsweredQuestions={this.props.notAnsweredQuestions}\r\n                    chooseOption={this.chooseOptionHandler}\r\n                    saveQuestion={this.saveQuestionHandler}\r\n                    switchQA={this.showAnswersHandler} />\r\n            );\r\n        };\r\n\r\n        return <div>{homeUI}</div>\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.Home.loading,\r\n        allQuestions: state.Home.allQuestions,\r\n        allUsers: state.Home.allUsers,\r\n        answeredQuestions: state.User.answeredQuestions,\r\n        notAnsweredQuestions: state.User.notAnsweredQuestions,\r\n        loggedUser: state.User.loggedUser,\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onLoginUser: (user, allQuestions, userID) => dispatch(actions.logInUserInit(user, allQuestions, userID)),\r\n        onSetAllUsersInit: () => dispatch(actions.setAllUsersInit()),\r\n        onSetAllQuestions: () => dispatch(actions.setAllUsersQuestionsInit()),\r\n        onSaveAnswerInit: (questionInfo) => dispatch(actions.saveQuestionInit(questionInfo))\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React, { Fragment } from 'react';\r\nimport { Nav } from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst displayItems = (props) => {\r\n    let display = (\r\n        <Nav className=\"mr-auto\">\r\n            <Nav.Item>\r\n                <NavLink to='/' className=\"nav-link\" activeClassName='nav-link active' exact>\r\n                    Home\r\n                </NavLink>\r\n            </Nav.Item>\r\n        </Nav>\r\n    );\r\n    if (props.user) {\r\n        display = (\r\n            <Nav className=\"mr-auto\">\r\n                <Nav.Item>\r\n                    <NavLink to='/' className=\"nav-link\" activeClassName='nav-link active' exact>\r\n                        Home\r\n                     </NavLink>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <NavLink to='/add' className=\"nav-link\" activeClassName='nav-link active' exact>\r\n                        New Question\r\n                     </NavLink>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <NavLink to='/leaderboard' className=\"nav-link\" activeClassName='nav-link active' exact>\r\n                        Leaders Board\r\n                     </NavLink>\r\n                </Nav.Item>\r\n            </Nav>\r\n        );\r\n    }\r\n\r\n    return <Fragment>{display}</Fragment>\r\n};\r\n\r\n\r\nexport default displayItems;","import React, { Fragment } from 'react';\r\n\r\nimport {Nav, Button } from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst logStatus = (props) => {\r\n    let logStat = (\r\n        <Nav.Item >\r\n            <NavLink to='/login'>\r\n                <Button variant=\"outline-success\" >Login</Button>\r\n            </NavLink>\r\n        </Nav.Item>\r\n    );\r\n    if (props.name) {\r\n        logStat = (\r\n            <Fragment>\r\n                <Nav.Item >\r\n                    <NavLink to='/logout'>\r\n                        <Button variant=\"outline-danger\" >Logout</Button>\r\n                    </NavLink>\r\n                </Nav.Item>\r\n                <Nav.Item style={{ marginLeft: '7px' }} >\r\n                    <NavLink to='/'>\r\n                        <Button variant=\"primary\" >{props.name}</Button>\r\n                    </NavLink>\r\n                </Nav.Item>\r\n            </Fragment>\r\n        );\r\n    };\r\n    return logStat\r\n\r\n\r\n};\r\n\r\nexport default logStatus;","import React from 'react';\r\n\r\nimport { Navbar} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faQuestionCircle } from '@fortawesome/free-regular-svg-icons';\r\nimport DisplayItems from '../NavigationItems/DisplayItems/DisplayItems';\r\nimport LogStatus from '../NavigationItems/LogStatus/LogStatus';\r\n\r\nconst toolbar = (props) => {\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand> <FontAwesomeIcon icon={faQuestionCircle} color='orange' /> </Navbar.Brand>\r\n            <DisplayItems user={props.userStatus} />\r\n            <LogStatus\r\n                name={props.userStatus ? props.userStatus.name : null} />\r\n        </Navbar>\r\n    );\r\n};\r\n\r\n\r\nexport default toolbar;","import React, { Component } from 'react';\r\n\r\nimport Toolbar from '../../components/Navigation/Toolbar/Toolbar';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Layout extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Toolbar userStatus={this.props.userStatus}/>\r\n                <main style={{marginTop:'32px'}}>\r\n                    {this.props.children }\r\n                </main>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        userStatus: state.User.loggedUser \r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Layout);","import React from 'react';\r\n\r\nimport {Card,ListGroup,ListGroupItem} from 'react-bootstrap';\r\n\r\nconst leaderboardUI = (props) => {\r\n    return (\r\n        <Card style={{ width: '18rem' }}>\r\n            <Card.Img variant=\"top\" src={props.user.avatarURL} />\r\n            <Card.Body>\r\n                <Card.Title>{props.user.name}</Card.Title>\r\n            </Card.Body>\r\n            <ListGroup className=\"list-group-flush\">\r\n                <ListGroupItem> Total Score - {props.totalPoints}</ListGroupItem>\r\n                <ListGroupItem> answer Score - {props.answersPoints}</ListGroupItem>\r\n                <ListGroupItem> question Score - {props.questionsPoints}</ListGroupItem>\r\n            </ListGroup>\r\n        </Card>\r\n    );\r\n};\r\n\r\n\r\nexport default leaderboardUI;\r\n","import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport LeaderboardsUI from '../../components/Leadersboard/LeadersboardUI';\r\n\r\nclass Leadersboard extends Component {\r\n    render() {\r\n        let allUsers = this.props.allUsers.map(user => {\r\n            const answersPoints = Object.values(user.answers).length\r\n            const questionsPoints = user.questions.length\r\n            const totalPoints = answersPoints + questionsPoints;\r\n            return <LeaderboardsUI  key={user.id} answersPoints={answersPoints} questionsPoints={questionsPoints} totalPoints={totalPoints} user={user} />\r\n        })\r\n        allUsers = allUsers.sort((a , b) => a.props.totalPoints - b.props.totalPoints).reverse()\r\n        console.log(allUsers)\r\n        return (\r\n            <div>\r\n                {allUsers}\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        allUsers: state.Home.allUsers\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Leadersboard);","import React from 'react';\r\n\r\nimport { Form, Col, Button } from 'react-bootstrap'\r\n\r\nconst newQuestionUI = (props) => {\r\n    return (\r\n        <Form validated>\r\n            <Form.Row>\r\n                <Col>\r\n                    <Form.Control placeholder=\"Option One\" value={props.optionOne} onChange={(event) => props.changed(event, 'optionOne')} required />\r\n                </Col>\r\n                <Col>\r\n                    <Form.Control placeholder=\"Option Two\" value={props.optionTwo} onChange={(event) => props.changed(event, 'optionTwo')} required />\r\n                </Col>\r\n            </Form.Row>\r\n            <Button\r\n                type=\"submit\"\r\n                disabled={!props.isValid}\r\n                onClick={(event) => props.submit(event)}>\r\n                Submit Question\r\n                 </Button>\r\n        </Form>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default newQuestionUI;","import React, { Component, Fragment } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport NewQuestionUI from '../../components/NewQuestionUI/NewQuestionUI';\r\n\r\nclass NewQuestion extends Component {\r\n    state = {\r\n        optionOne: {\r\n            value: '',\r\n            rules: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n        },\r\n        optionTwo: {\r\n            value: '',\r\n            rules: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n        },\r\n        validForm: false,\r\n    };\r\n    changeOptionValueHandler = (event, selectedOption) => {\r\n        let validForm = false;\r\n        const selectedOptionUpdated = {\r\n            ...this.state[selectedOption],\r\n            value: event.target.value,\r\n            valid: this.checkValid(event.target.value, this.state[selectedOption].rules)\r\n        };\r\n        this.setState({ [selectedOption]: selectedOptionUpdated }, () => {\r\n            if (this.state.optionOne.valid && this.state.optionTwo.valid) {\r\n                validForm = true;\r\n            }\r\n            this.setState({ validForm: validForm })\r\n        });\r\n    };\r\n    checkValid = (value, rules) => {\r\n        let isValid = true;\r\n        if (rules.required) {\r\n            isValid = value.trim() !== '' && isValid\r\n        };\r\n        return isValid;\r\n    };\r\n    submitFormHandler = (event) => {\r\n        event.preventDefault()\r\n        const questionInfo = {\r\n            optionOneText: this.state.optionOne.value,\r\n            optionTwoText: this.state.optionTwo.value,\r\n            author: this.props.loggedUser.id\r\n        }\r\n        this.props.onAddQuestion(questionInfo)\r\n        this.props.history.push('/')\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Fragment>\r\n                <h1>Would you rather</h1>\r\n                <NewQuestionUI\r\n                changed={this.changeOptionValueHandler}\r\n                optionOne={this.state.optionOne.value}\r\n                optionTwo={this.state.optionTwo.value}\r\n                isValid={this.state.validForm}\r\n                submit={this.submitFormHandler} />\r\n            </Fragment>\r\n\r\n        );\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAddQuestion: (questionInfo) => dispatch(actions.addQuestionInit(questionInfo))\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedUser: state.User.loggedUser,\r\n        allQuestions: state.Home.allQuestions\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewQuestion);","import React, { Component } from 'react';\nimport './App.css';\n\nimport { connect } from 'react-redux'\nimport Login from './containers/User/Login/Login';\nimport Logout from './containers/User/Logout/Logout'\nimport Home from './containers/Home/Home';\nimport Layout from './hoc/Layout/Layout';\nimport Leadersboard from './containers/Leadersboard/Leadersboard';\nimport NewQuestion from './containers/NewQuestion/NewQuestion';\nimport * as actions from './store/actions/index';\nimport { Route, Switch, Redirect } from 'react-router-dom'\n\n\nclass App extends Component {\n  componentDidMount() {\n      this.props.onGetAllUsersInit()\n      this.props.onSetAllQuestions()\n      }\n  componentDidUpdate() {\n    console.log(this.props.allUsers)\n    if(!this.props.loggedUser && this.props.allQuestions && this.props.allUsers) {\n      console.log('token')\n      this.props.onAutoLogin(this.props.allQuestions,this.props.allUsers)\n    }\n  }\n  render() {\n    let routes = (\n      <Switch>\n        <Route path='/login' component={Login} exact />\n        <Route path='/' component={Home} exact />\n        <Redirect to='/' />\n      </Switch>\n\n    )\n    if (this.props.loggedUser) {\n      routes = (\n        <Switch>\n          <Route path='/login' component={Login} exact />\n          <Route path='/logout' component={Logout} exact />\n          <Route path='/leaderboard' component={Leadersboard} exact />\n          <Route path='/add' component={NewQuestion} exact />\n          <Route path='/questions/:id' component={Home} exact />\n          <Route path='/' component={Home} exact />\n          <Redirect to='/' />\n        </Switch>\n      );\n    }\n    return (\n      <Layout>\n        {routes}\n      </Layout>\n    );\n  };\n};\nconst mapStateToProps = state => {\n  return {\n    token: state.User.token,\n    loggedUser: state.User.loggedUser,\n    allQuestions: state.Home.allQuestions,\n    allUsers: state.Home.allUsers,\n    unAnsweredQuestions: state.User.unAnsweredQuestions,\n    answeredQuestions: state.User.answeredQuestions\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAutoLogin: (allQuestions,allUsers) => dispatch(actions.autoLoginInit(allQuestions,allUsers)),\n    onGetAllUsersInit: () => dispatch(actions.setAllUsersInit()),\n    onSetAllQuestions: () => dispatch(actions.setAllUsersQuestionsInit())\n  };\n};\n\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObj, newObj) => {\r\n    return {\r\n        ...oldObj,\r\n        ...newObj\r\n    };\r\n};","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../../utility/functions/functions';\r\n\r\nconst initalState = {\r\n    notAnsweredQuestions: [],\r\n    answeredQuestions: [],\r\n    loggedUser: null,\r\n    loading: false,\r\n    token: null\r\n};\r\n\r\nconst UserReducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n        //Loggin and filtering answeredQuestions and not answered Questions\r\n        case (actionTypes.LOGIN_USER): {\r\n            const answered = Object.keys(action.user.answers)\r\n            const answeredQuestions = action.allQuestions.filter(q => answered.includes(q.id))\r\n            const notAnsweredQuestions = action.allQuestions.filter(q => !answered.includes(q.id))\r\n            localStorage.setItem('token', action.user.id);\r\n            return updateObject(state, { loggedUser: action.user, notAnsweredQuestions: notAnsweredQuestions, answeredQuestions: answeredQuestions, token:action.token })\r\n        }\r\n        //Logging out.\r\n        case (actionTypes.LOGOUT_USER): {\r\n            localStorage.removeItem('token')\r\n            return updateObject(state, { loggedUser: null }) \r\n        }\r\n        default: return state;\r\n    };\r\n};\r\n\r\n\r\nexport default UserReducer;","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../../utility/functions/functions';\r\n\r\nconst initalState = {\r\n    allUsers: null,\r\n    allQuestions: null,\r\n    loading: false\r\n};\r\n\r\nconst HomeReducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n        //Getting all Questions\r\n        case (actionTypes.SET_ALL_USERS_QUESTIONS_START): {\r\n            return updateObject(state, { loading: true })\r\n        }\r\n        case (actionTypes.SET_ALL_USERS_QUESTIONS_SUCCESS): {\r\n            const allQuestionsSorted = Object.values(action.questions).sort((a, b) => {\r\n                return a.timestamp - b.timestamp\r\n            });\r\n            return updateObject(state, { allQuestions: allQuestionsSorted.reverse(), loading: false })\r\n        }\r\n        case (actionTypes.SET_ALL_USERS_QUESTIONS_FAIL): {\r\n            return updateObject(state, { loading: false })\r\n        }\r\n\r\n\r\n        //Getting all Users\r\n        case (actionTypes.GET_ALL_USERS_START): {\r\n            return updateObject(state, { loading: true })\r\n        }\r\n        case (actionTypes.GET_ALL_USERS_SUCCESS): {\r\n            return updateObject(state, { allUsers: action.users })\r\n        }\r\n        case (actionTypes.GET_ALL_USERS_FAIL): {\r\n            return updateObject(state, { loading: false })\r\n        } \r\n\r\n\r\n        //Saving new Question\r\n        case (actionTypes.SAVE_QUESTION_ANSWER_START): {\r\n            return updateObject(state, { loading: true })\r\n        }\r\n        case (actionTypes.ADD_QUESTION_START): return (updateObject(state, { loading: true }))\r\n        case (actionTypes.ADD_QUESTION_SUCCESS): {\r\n            const updateAllQuestions = [action.newQuestion, ...state.allQuestions]\r\n            return updateObject(state, { allQuestions: updateAllQuestions, loading: false })\r\n        }\r\n        case (actionTypes.ADD_QUESTION_FAIL): return updateObject(state, { loading: false })\r\n\r\n        default: return state;\r\n    };\r\n};\r\n\r\nexport default HomeReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport { Provider} from 'react-redux';\nimport thunk  from 'redux-thunk'\nimport UserReducer from './store/reducers/User';\nimport HomeReducer from './store/reducers/Home';\n\nconst rootReducer = combineReducers({\n    User: UserReducer,\n    Home: HomeReducer\n});\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\n\nconst store = createStore( rootReducer, composeEnhancers( applyMiddleware(thunk) ) );\n\nconst app = (\n    <Provider store={ store }>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n);\n\nReactDOM.render(app , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}